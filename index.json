[{"uri":"/BIO-BTE-12-V-4/index.html","title":"BIO-BTE-12-V-4\n","content":"# BIO-BTE-12-V-4\n\n\u003Cbr\u003E\n\nDeutscher titel: **Wissenschaftliche Programmierung f\u00FCr Biolog*innen (Vorlesung/\u00DCbung)**\n\nEnglish title: **Scientific Programming For Biologists (Lecture \u0026 Exercise)**\n\nKIS: [BIO-BTE-12-V-4](https://www.kis.uni-kl.de/campus/all/event.asp?gguid=0xD702B068C88449BEAF7C4E9C1EEE592D\u0026tguid=0xA0CC12CC38514E09833533E643742D94)\n\n**Credit Points (CP): 3**\n\n## Table of contents\n\n- [Kursbeschreibung(deutsch)](#Kursbeschreibung-deutsch)\n    - [Ablauf](#Ablauf)\n        - [Vorlesungen](#Vorlesungen)\n        - [\u00DCbungen](#\u00DCbungen)\n    - [Zeitplan](#Zeitplan)\n- [Course description(english)](#Course-description-english)\n    - [Procedure](#Procedure)\n        - [Lectures](#Lectures)\n        - [Tasks](#Tasks)\n    - [Schedule](#Schedule)\n\n## Kursbeschreibung(deutsch)\n\nZielsetzung dieser Vorlesung mit anschlie\u00DFenden \u00DCbungen ist die Vermittlung von Kenntnissen \u00FCber Grundlagen der funktionalen und objektorientierten Programmierung sowie die Behandlung grundlegender Datenstrukturen und Algorithmen. Vermittelt werden begriffliche Grundlagen, Konzepte, Methoden und Techniken zur Darstellung und Strukturierung von Daten und zur Entwicklung von Algorithmen. Werkzeuge des wissenschaftlichen Rechnens und der Datenverabeitung, insbesondere f\u00FCr die Visualisierung und Bearbeitung von Messdaten werden vorgestellt. Die Referenzsprache ist F# (FSharp), die in Kombination mit modernen Softwarebibliotheken und der Softwareumgebung R zur Probleml\u00F6sung eingesetzt wird. Abschlie\u00DFend besteht die M\u00F6glichkeit in individuellen Projektarbeiten typische Einsatzfelder der Bioinformatik zu bearbeiten und Problemstellungen eigenst\u00E4ndig zu l\u00F6sen.\n\n## Ablauf \n\n### Vorlesungen\n\nDie Vorlesungen werden sowohl als Videoaufzeichnung als auch als PDF zur verf\u00FCgung gestellt.\n\nUm zu den jeweiligen Vorlesungen auf deutsch zu gelangen, w\u00E4hlen sie eine Vorlesung aus der Sidebar links unter der Rubrik \u0060Lecture material\u0060 oder w\u00E4hlen sie die entsprechende Vorlesung aus dem [Zeitplan](#Zeitplan)\n\n### \u00DCbungen\n\n- Die \u00DCbungen der jeweiligen Vorlesung sind bis zum **Tag vor der \u00DCbungsbesprechung** in der darauf folgenden Woche zu bearbeiten und abzugeben (also 24h bevor die jeweilige \u00DCbung besprochen wird).\n- F\u00FCr das erfolgreiche Abschlie\u00DFen der Vorlesung und das Erhalten der CP m\u00FCssen 50% der _Gesamtpunkte aller \u00DCbungen_ erreicht werden.\n- Falls nicht anders angegeben gibt jede Aufgabe/Task 1 Punkt.\n- Bitte reichen sie Ihre bearbeiteten \u00DCbungen als Email mit dem titel \u0060wpb-task-XXX-RHRK_K\u00DCRZEL\u0060 und folgenden Dateianhang: \u0060wpb-task-XXX-RHRK_K\u00DCRZEL.DATEIENDUNG\u0060 ein. Die Email-Adresse zur Einreichung erhalten sie gesondert.\n\n    **Ein Beispiel:** \n\n    - Sie wollen Ihre L\u00F6sungen f\u00FCr \u0060\u00DCbung01\u0060 einreichen.  \n    - Ihr RHRK K\u00FCrzel ist \u0060schneike\u0060. \n    - Sie reichen ihre \u00DCbungen als \u0060.fsx\u0060 Datei ein (dazu in der Besprechung mehr). \n\n    =\u003E der korrekte Name der Datei und damit des Emailanhangs lautet \u0060wpb-task-01-schneike.fsx\u0060\n\n    =\u003E der korrekte Titel der Email lautet \u0060wpb-task-01-schneike\u0060\n    \n- Sie erhalten Ihre \u00DCbungen nur auf Anfrage kontrolliert zur\u00FCck. Die \u00DCbungen werden w\u00E4hrend der Besprechung komplett besprochen und durchgearbeitet, Sie k\u00F6nnen Ihre L\u00F6sung also dort mit uns besprechen. Anschlie\u00DFend geben wir eine Musterl\u00F6sung aus. \n- Wir halten rechtzeitig R\u00FCcksprache mit Ihnen, falls Ihre Punktzahl droht unter 50% zu fallen. _Wenn wir uns nicht bei Ihnen diesbez\u00FCglich melden, ist also alles okay ;)_\n- Konstruktive Mitarbeit in den \u00DCbungsbesprechungen wirkt sich nicht nur positiv auf ihren Lernerfolg sondern auch auf ihre Punktzahl aus.\n\n## Zeitplan\n\n| Datum | Vorlesung (Thema bis zur Besprechung in der folgenden Woche) | \u00DCbungsbesprechung (13:00 - 15:00) | Sp\u00E4tester Abgabezeitpunkt Der \u00DCbung | \n|---|---|---|---|\n| 20.04.2021 | [WPB I: Hello F#]({{root}}lectures/hello-fsharp.html) | Keine, stattdessen Hilfe bei der [Einrichtung der Programmierumgebung]({{root}}tasks/german/installationsanweisungen.html) | 26.04.2021 13:00 |\n| 27.04.2021 | [WPB II: Funktionen und Datentypen]({{root}}lectures/functions-and-data-types.html) | [\u00DCbung01]({{root}}tasks/german/wpb-task-01.html) | 03.05.2021 13:00 |\n| 04.05.2021 | [WPB III: Kontrollfluss]({{root}}lectures/control-flow.html) | [\u00DCbung02]({{root}}tasks/german/wpb-task-02.html) | 10.05.2021 13:00 |\n| 11.05.2021 | [WPB IV: Programmieren mit Funktionen]({{root}}lectures/programming-with-functions.html) | [\u00DCbung03]({{root}}tasks/german/wpb-task-03.html) | 17.05.2021 13:00 |\n| 18.05.2021 | [WPB V: Programmieren mit Objekten]({{root}}lectures/programming-with-objects.html) | [\u00DCbung04]({{root}}tasks/german/wpb-task-04.html) | 24.05.2021 13:00 |\n| 25.05.2021 | WPB VI: Typendesign | [\u00DCbung05]({{root}}tasks/german/wpb-task-05.html) | 31.05.2021 13:00 |\n| 01.06.2021 | WPB VII: Datenvisualisierung | \u00DCbung06 | 07.06.2021 13:00 |\n| 08.06.2021 | WPB VIII: Deskriptive Statistik | \u00DCbung07 | 14.06.2021 13:00 |\n| 15.06.2021 | WPB IX: Datenzugriff | \u00DCbung08 | 21.06.2021 13:00 |\n| 22.06.2021 | WPB X: Bioinformatik mit F# | \u00DCbung09 | 28.06.2021 13:00 |\n| 29.06.2021 | WPB XI: F# \u003C\u003E R| \u00DCbung10 | - |\n| 06.07.2021 | Puffer(evtl. Nachbesprechung) | - | - |\n| 13.07.2021 | Puffer(evtl. Nachbesprechung) | - | - |\n| 20.07.2021 | Puffer(evtl. Nachbesprechung) | - | - |\n\n## Course description(english)\n\nThe aim of this lecture with subsequent exercises is to impart knowledge about the basics of functional and object-oriented programming and to deal with basic data structures and algorithms. Conceptual basics, methods and techniques for structuring data and for the development of algorithms are taught. Tools of scientific computing and data processing, especially for the visualization and processing of measurement data, are presented. The reference language is F# (FSharp), which is used in combination with modern software libraries and the R software environment for problem solving.\n\nKIS: [BIO-BTE-12-V-4](https://www.kis.uni-kl.de/campus/all/event.asp?gguid=0xD702B068C88449BEAF7C4E9C1EEE592D\u0026tguid=0xA0CC12CC38514E09833533E643742D94)\n\n## Procedure\n\n### Lectures\n\nThe lecture slides are available in english language.\n\nTo access lecture material, either head to the sidebar to the left to the respective link in the \u0060Lecture material\u0060 section or take a look at the [schedule](#Schedule)\n\n### Tasks\n\n- The tasks for the respective lectures must be submitted until the task session of the subsequent week.\n- To successfully finish this course you must at least score 50% of the _overall possible points of all tasks combined_.\n- If not indicated otherwise, each task is worth 1 point.\n- Please submit your tasks as an email with the title \u0060wpb-task-XXX-RHRK_HANDLE\u0060 and the task as attachement with the filename \u0060wpb-task-XXX-RHRK_HANDLE.EXTENSION\u0060. The email address for submissions will be communicated seperately.\n\n    **Example:** \n\n    - You want to submit \u0060Task01\u0060.  \n    - Your RHRK handle is \u0060schneike\u0060. \n    - You submit the task as a \u0060.fsx\u0060 file (More on that during the first session). \n\n    =\u003E the correct name of the task as email attachment is \u0060wpb-task-01-schneike.fsx\u0060\n\n    =\u003E the correct email title is \u0060wpb-task-01-schneike\u0060\n\n- You only get back corrected versions of your task by special request. The tasks will be completely solved during task sessions together with you. You can talk with us about your solutions during the session. After the session we will send out a sample solution for the task.\n- We will contact you in time should you fall below the 50% point threshold. _That means if we do not contact you, everything is fine ;)_\n- Constructive collaboration during task sessions is not only good for your personal understanding but also your overall points.\n\n## Schedule\n\n| Date | Lecture (Topic until next task session) | Task session (13:00 - 15:00) | Task submission deadline |\n|---|---|---|---|\n| 20.04.2021 | [WPB I: Hello F#]({{root}}lectures/hello-fsharp.html) | None, instead we help you with [setting up your programming environment]({{root}}tasks/english/installation-instructions.html) | 26.04.2021 13:00 |\n| 27.04.2021 | [WPB II: Functions and datatypes]({{root}}lectures/functions-and-data-types.html) | [Task01]({{root}}tasks/english/wpb-task-01.html) | 03.05.2021 13:00 |\n| 04.05.2021 | [WPB III: Control flow]({{root}}lectures/control-flow.html) | [Task02]({{root}}tasks/english/wpb-task-02.html) | 10.05.2021 13:00 |\n| 11.05.2021 | [WPB IV: Programming with functions]({{root}}lectures/programming-with-functions.html) | [Task03]({{root}}tasks/english/wpb-task-03.html) | 17.05.2021 13:00 |\n| 18.05.2021 | [WPB V: Programming with objects]({{root}}lectures/programming-with-objects.html) | [Task04]({{root}}tasks/english/wpb-task-04.html) | 24.05.2021 13:00 |\n| 25.05.2021 | WPB VI: Designing with types | [Task05]({{root}}tasks/english/wpb-task-05.html) | 31.05.2021 13:00 |\n| 01.06.2021 | WPB VII: Data visualization | Task06 | 07.06.2021 13:00 |\n| 08.06.2021 | WPB VIII: Descriptive statistics | Task07 | 14.06.2021 13:00 |\n| 15.06.2021 | WPB IX: Data access | Task08 | 21.06.2021 13:00 |\n| 22.06.2021 | WPB X: Embracing bioinformatics in F# | Task09 | 28.06.2021 13:00 |\n| 29.06.2021 | WPB XI: F# \u003C\u003E R| Task10 | - |\n| 06.07.2021 | Buffer(possibly debriefing) | - | - |\n"},{"uri":"/BIO-BTE-12-V-4/tasks/english/wpb-task-07.html","title":"Task 07","content":"(**\n---\ntitle: Task 07\ncategory: Tasks(english)\ncategoryindex: 3\nindex: 8\n---\n*)\n\n(**\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/csbiology/BIO-BTE-12-V-4/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Data visualization with Plotly.NET\n\n**Use adequate axis titles for all charts**\n\n**The code for generating the charts is sufficient, there is no need to send us images of charts.**\n\n## 0 Preface\n\nThe Plotly.NET library documentation can be found at https://plotly.net\n\n### Referencing Plotly.NET\n\nThese lines alsways have to be executted once, otherwise you can not use the Plotly.NET library:\n*)\n#r \u0022nuget: Plotly.NET, 2.0.0-preview.1\u0022\n#r \u0022nuget: Plotly.NET.Interactive, 2.0.0-preview.1\u0022\nopen Plotly.NET\n\n(**\nThere are two different approaches for displaying charts, depending on if you are working in a Notebook or .fsx scripting environment:\n\n### Displaying Charts in .fsx scripts\n\nUse the \u0060Chart.Show\u0060 function in .fsx scripts to display charts in a browser window:\n*)\n\n(***do-not-eval***)\nChart.Point([(1,1); (2,2)])\n|\u003E Chart.withTitle \u0022hello from .fsx\u0022\n|\u003E Chart.Show\n\n(**\n### Displaying charts in notebooks\n\nWhile you can also use Chart.Show in a notebook environment, you can directly display charts in the respective output \ncell as long as you end the input cell with the chart value (just as known from all other types) thanks to the .\u0060Plotly.NET.Interactive\u0060 extension:\n\n*)\n\nChart.Point([(1,1); (2,2)])\n|\u003E Chart.withTitle \u0022hello inside the notebook\u0022\n\n(**\n## 1 Visualizing X/Y relationships\n\n### Task 1.1\n\nCreate a list containing the values in the range from 0.0 to (4. * PI) with a step size of 0.001.\nBind it to the name \u0027xValues\u0027\n*)\n\n(******)\n\n(**\n### Task 1.2\n\ncreate two lists, containing the results of applying either sin(x) or cos(x) to the data in \u0027xValues\u0027 respectively.\n\n_Hint: Use the map function_\n*)\n\n(******)\n\n(**\n\n### Task 1.3\n\nCreate 2 line and 2 point charts visualizing the relationship of \u0027xValues\u0027 and sin(x)/cos(x) respectively via position scales.\nYou should end up with 4 charts.\n*)\n\n(******)\n\n(**\n### Task 1.4\n\n**a)** Combine the point and line charts from 1.3 in a single coordinate system (to a single chart with 4 subplots)\n\n_Hint: Use Chart.Combine_\n\n**b)** What is the third dimension of that Chart encoding?\n*)\n\n(******)\n\n(**\n### Task 1.5 \n\nVisualize the (x,y) tuples from the following list. Use linear X and Y scales first, \nthen transform the data via an adequate non linear transformation and visualize the result.\n\n_Hint: if you want to transform the axis instead of the data:_\n\u0060Chart.withY_Axis( Axis.LinearAxis.init(StyleParam.AxisType. ...)  )\u0060\n*)\n\nlet someData = [0. .. 1. .. 10.] |\u003E List.map (fun x -\u003E x,(10. ** x))\n\n(**\n## 2 Visualizing sizes/abundances\n\n### Task 2.1 \n\nVisualize the abundances of hair color in the course. If there is no data available, \nmake up a data set with at least 5 different hair colors for 20 imagined people.\n\n_Hint: either create a list of (hair color, abundance) tupels or one list for hair color and abundance each._\n*)\n\n(******)\n\n(**\n### Task 2.2\n\nVisualize the amount of the amount of generated terrawatt hours in germany in 2020 by energy source. Use a bar chart and sort the data by amount of electricity generated. \n\n_Data source:_ https://de.wikipedia.org/wiki/Stromerzeugung#Bruttostromerzeugung_nach_Energietr%C3%A4gern_in_Deutschland\n*)\n\n(******)\n\n(**\n### Task 2.3 \n\nData visualization can often lead to the discovery of patterns in data that would not be obvious by \nlooking at the raw data alone - especially for large, multidimensional data sets.\n\nThe prepared data set below has three dimensions: the indices of the outer array, the indices of the inner arrays, \nand the actual float values contained in the inner arrays. Visualize this data set using a heatmap.\n\nWhat kind of information is likely encoded in the respective dimensions? Use adequate titles for your chart.\n\n*)\n\nlet data3D =\n    [|\n        [|2.;2.;2.;2.;2.;2.;2.;2.;2.|]\n        [|2.;2.;0.;0.;1.;0.;0.;2.;2.|]\n        [|2.;0.;0.;3.;3.;3.;0.;0.;2.|]\n        [|2.;0.;3.;0.;0.;0.;3.;0.;2.|]\n        [|2.;0.;3.;0.;0.;0.;3.;0.;2.|]\n        [|2.;0.;0.;0.;3.;0.;0.;0.;2.|]\n        [|2.;0.;0.;0.;0.;0.;0.;0.;2.|]\n        [|2.;0.;3.;0.;0.;0.;3.;0.;2.|]\n        [|2.;2.;0.;0.;0.;0.;0.;2.;2.|]\n        [|2.;2.;2.;1.;1.;1.;2.;2.;2.|]\n    |]\n\n(**\n## 3 Visualizing proportions\n\n### Task 3.1 \n\nVisualize the results of a federal election in germany.\n\n_Data source:_ https://de.wikipedia.org/wiki/Liste_der_letzten_Landtagswahlergebnisse_in_Deutschland\n*)\n\n(******)\n\n(**\n### Task 3.2 \n\nCompare the vote proportions from 3.1 visually with the results of 3 other federal states.\n\n*)\n\n(******)\n\n(**\n### Task 3.3 \n\nVisualize the data from 2.2 regarding the proportions of the respective energy sources of the overall electricity production.\n\n_Tipp: Chart.Doughnut; You have to divide the respective data points by the total electricity amount._\n*)\n\n(******)\n\n(**\n### 4 Visualisierung von geographischer Lage\n\n### Task 4.1\n\nVisualize the proportion of the world population of the 16 most populated countries in the world.\n\n_Data source:_ https://de.wikipedia.org/wiki/Weltbev%C3%B6lkerung#Die_bev%C3%B6lkerungsreichsten_Staaten\n\n_Tipp: Chart.Choropleth. Ideally your chart will result in something like the chart on wikipedia._\n*)\n\n(******)\n\n(**\n## 5 Bonus\n\nCreate a climate chart for Kaiserslautern.\n\nYou will have to combine multiple chart types.\n\n_Data source:_ https://de.climate-data.org/europa/deutschland/rheinland-pfalz/kaiserslautern-2135/\n\n*)\n\n(******)"},{"uri":"/BIO-BTE-12-V-4/tasks/english/wpb-task-04.html","title":"Task 04","content":"(**\n---\ntitle: Task 04 \ncategory: Tasks(english)\ncategoryindex: 3\nindex: 5\n---\n*)\n\n\n(**\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/csbiology/BIO-BTE-12-V-4/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Task04 - Programming with functions\n\n## Higher order functions\n\n### Task 1.1:\n\nRewrite the following function by using the pipe operator \u0060|\u003E\u0060 and the given functions.\n\nClue: \n\n  - Pipe operators lead to a positioning of the parameter left of the operator to the end of the right side: \n\n  - \u0060a |\u003E add b\u0060 is equal to \u0060add b a\u0060\n*)\n(******)\n\nlet mathNotation x y = ((2. \u002B 3. * (x \u002B 1.))**2.) * y\n\nlet add (a:float) b = a \u002B b\nlet square (x :float) = x * x\nlet multiply (a:float) b = a * b\n\nlet pipeNotation x y =\n    1. //replace me\n\n// Test if both notations report the same result\npipeNotation 1. 7. = mathNotation 1. 7.\n\n\n(**\n\n### Task 1.2\n\nDeclare any function with the signature \u0060int -\u003E int -\u003E int\u0060. Make sure that all parameters are used within the function body.\n\nIs it a first order function or a higher order function?\n\n*)\n(******)\n\n(**\n### Task 1.3\n\n\nDeclare any function with the signature \u0060int -\u003E int -\u003E (int -\u003E int -\u003E int) -\u003E float\u0060. Make sure that all parameters are used within the function body.\n\nIs it a first order function or a higher order function?\n\n*)\n(******)\n\n(**\n### Task 1.4\n\nCall the function defined in \u00601.3\u0060. Use two random values and the function from \u00601.2\u0060 as parameters.\n\n*)\n(******)\n\n\n(**\n\n## Programming with functions\n\n### Task 2.1.1\n\nBelow you can see a record type called \u0060Cat\u0060. Create two random values of type \u0060Cat\u0060 and bind them to random names.\nHave a look at \u0060Exercise 02\u0060 if you have any difficulties here.\n\n*)\n(******)\n\ntype Cat = {\n    Name    : string\n    Weight  : float\n    Color   : string\n    Age     : int}\n\n(**\n### Task 2.1.2\n\nDeclare a function called \u0060getWeight\u0060, that takes a \u0060Cat\u0060 as parameter and reports its weight.\n\n*)\n(******)\n\n(**\n### Task 2.1.3\n\nYou cannot apply standard mathematical operators to record types. \nDeclare a function called \u0060applyToWeight\u0060 that receives two parameters of type Cat (c1 and c2) and one parameter of type \u0060(float -\u003E float -\u003E float)\u0060 (f). \nIn the function body, the function f should be applied to the weights of the two cats c1 and c2.\n\nClue: Define the types of the parameters. \n\n*)\n(******)\n\n(**\n### Task 2.1.4\n \nApply the function \u0060applyToWeight\u0060 with the previously created Cats and the function \u0060averageOfTwo\u0060.  \n\n*)\n(******)\n\nlet averageOfTwo (a:float) b =\n    (a \u002B b) / 2.\n\n(**\n### Task 2.2 (optional)\n\nThis task does not have to be solved! It serves to create a cat list that is required later.\nIf you want, you can comment on what happens in the indicated lines (extra point).\n\n*)\n(******)\n\n// This is a random number generator. \n// randomNumberGenerator.NextDouble() creates a random float between 0. and 1.\n// randomNumberGenerator.Next(x) creates a random int between 0 and x-1.\nlet randomNumberGenerator = System.Random()\n\n// Here a function is defined that creates a value of typ Cat.\nlet createRandomCat (i :int) = \n    // Comment: \n    let name   = \u0022Cat \u0022 \u002B string i \n    // Comment: \n    let age    = randomNumberGenerator.Next(16)\n    // Comment: \n    let weight = 3. \u002B 5. * randomNumberGenerator.NextDouble()\n    let color  = \n        let colors = [\u0022white\u0022;\u0022red\u0022;\u0022black\u0022;\u0022grey\u0022;\u0022mixed\u0022]\n        // Comment: \n        colors.[i%5]\n    // Comment: \n    {\n    Name    = name\n    Weight  = weight\n    Color   = color   \n    Age     = age\n    }\n\n// Comment: \nlet catList = [for i=1 to 60 do yield createRandomCat i]\n\n\n(**\n### Task 2.3\n\nCreate a float list with the values from 0. to 100. and bind it to the name \u0060nList\u0060.\n\n*)\n(******)\n\n\n(**\n### Task 2.4\n\nWith map functions, one can apply a function that can be applied to individual elements to all elements of a list.\nParameters of the \u0060map\u0060 function:\n\n  1. \u0060doSomethingWithX\u0060:  Function to be applied to each list item\n\n  2. \u0060list\u0060:              List of elements to which \u0060doSomeThingWithX\u0060 is to be applied\n\n\u0060List.map\u0060 is applied as follows:\n\n  - \u0060List.map (fun listElement -\u003E doSomethingWithX listElement) list\u0060\n\nApply the function \u0060square\u0060 (Task 1.1) to each element of \u0060nList\u0060. Bind the result to the name \u0060nListSquared\u0060.\n\n*)\n(******)\n\n(**\n### Task 2.5\n\nExtract all weigts from \u0060catList\u0060 and bind it to the name \u0060catWeights\u0060\n\nClue: Search the \u0060List\u0060 module for a suitable function.\n\n*)\n(******)\n\n\n(**\n### Task 2.6\n\nCalculate the sum of the values from \u0060nList\u0060. \n\n*)\n(******)\n\n(**\n### Task 2.7\n\nFilter all list items that are divisible by 15.\n\nClue: Make use of \u0060List.filter\u0060 and the given function.\n\n*)\n(******)\n\nlet isDivisibleWithoutRemainder denominator numerator =\n    numerator % denominator = 0.\n\n(**\n### Task 2.8\n\nCalculate the sum of the squares of the individual values from nList.\nTry to achieve this in one step with \u0060List.fold\u0060.\n\n*)\n(******)\n\n(**\n### Task 2.9\n\nCalculate the average weight of the cats from \u0060catList\u0060. \n\nClue: The task can either be solved by using functions from the \u0060List\u0060 module, or you can solve it by using a single fold function (for experts).\n\n*)\n(******)\n"},{"uri":"/BIO-BTE-12-V-4/tasks/english/wpb-task-06.html","title":"Task 06","content":"(**\n---\ntitle: Task 06\ncategory: Tasks(english)\ncategoryindex: 3\nindex: 7\n---\n*)\n\n(**\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/csbiology/BIO-BTE-12-V-4/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Typen-gesteuertes Design\u200B - Tic Tac Toe\n\n***Disclaimer 1*** we included some blueprints of types or values which we think you might need (e.g. ValidMoves or diagonals), do not forget to implement them yourself!\n\n***Disclaimer 2*** This task is your chance to farm some points! We will evaluate it as a \u0027bonus\u0027. You can only \ncollect additional points and thereby only raise the percentage of tasks solved correctly. Have fun!\n\n### Task 1.1:\n\nThis is a tic tac toe board:\n\u0060\u0060\u0060\n    |-|X|-|\n    |X|O|-|\n    |O|-|-|\n\u0060\u0060\u0060\nThe board consists of 9 Cells. \nEach cells can have one of three states:\n\ni.   Empty \n\nii.  Occupied by player X \n\niii. Occupied by player Y. \n\nDefine a type abstracting the possible state of a cell.\n*)\n(******)\n\n(**\n### Task 1.2\n\nThe relative positions of a cell is important for the game. This means that we have to model the position of a cell.\nSince the number of cells is finit (9) and the field is quadratic, we have a finit number of possible positions. Define\nthe types needed to specify the cellpositions as: HorizontalPosition * VerticalPosition\n\n*)\n(******)\n\n(**\n### Task 1.3\n\nGiven the state of a cell and its position we can describe it completely. Declare a record type which contains this information.\n*)\n\n(******)\n\n(**\n### Task 1.4\n\nWe can describe the state of the board if we know the state of each cell. Define a type to model the tic tac toe board\n\n*)\n(******)\n\n\n(**\n### Task 2.1\n\nNow you should be equipped with all types to describe the board. Given a schematic representation of a possible\ngame:\n                                                                                                                                       \n\u0060\u0060\u0060                                                                                                                                                                                                                                                                   \n     want                    |-|-|-|                                               \n     to         ----------\u003E  |-|-|-| and list of possible moves (or empty cells) OR Result (winner X, winner Y or draw)\n     play         action A   |-|-|-|                                     \n                                                |\n                                                | action B  \n                                                |\n                                                v\n                             |X|-|-|                                               \n                             |-|-|-| and list of possible moves (or empty cells) OR Result (winner X, winner Y or draw)                                                                \n                             |-|-|-|                                     \n                                                |\n                                                | action C \n                                                |\n                                                v  \n                             |X|-|-|                                               \n                             |O|-|-| and list of possible moves (or empty cells) OR Result (winner X, winner Y or draw)\n                             |-|-|-|                                     \n                                                |\n                                                | action B \n                                                |\n                                                v  \n                             |X|-|-|                                               \n                             |O|X|-| and list of possible moves (or empty cells) OR Result (winner X, winner Y or draw)\n                             |-|-|-|                                     \n\u0060\u0060\u0060                              \nActions (moves) A, B and C either end the game (Winner X, Winner Y or draw), or result in an updated version of the board, a list of still empty cells\nand the next actions. To model this we can use a Union case:\n\u0060\u0060\u0060fsharp\ntype ValidMoves = {\n        Moves:List\u003CCellPosition\u003E\n    }\n\ntype MoveResult = \n    | Win of Player\n    | Tie \n    | Move of Player*GameState*ValidMoves\n\u0060\u0060\u0060\n*)\n\n\n(**\nDefine actions A, B and C as types. Use the UnionCase MoveResult.\n*)\n\n(******)\n\n(**\n### Task 2.2\nImplement a function that creates the board. The return value of the function\nshould be of type MoveResult. Player X should start the game.\nHint: Use lists of all horizontal and vertical positions.\n\n\u0060\u0060\u0060fsharp\nlet allHorizontal = [Left;Middle;Right]\nlet allVertical   = [Top;Center;Bottom] \n\u0060\u0060\u0060\n*)\n\n(******)\n\n(**\n### Task 2.3\nBefor we implement the moves of player X and player Y, we try to anticipate what this function has to do.\nThe function will manipulate the game. Implement a funtion with a parameter of type Gamestate, a parameter of\ntype CellPosition and a Parameter of type Player. The return value equals the updated gamestate.\n*)\n\n(******)\n\n(**\n### Task 2.4\nOf course, the function has to check if the game has been won by either party.\nSo we ask the question: how to prove this? The game is over, if one player occupies a column, row\nor diagonal completely. Implement a funciton with parameter of type GameState and a parameter of type player.\nThe function should return true, if the player won the game.\nHint: Use the lists of all possible rows, columns and diagonals:\n\u0060\u0060\u0060fsharp\nlet rows =\n    let makeHLine v = [for h in allHorizontal do yield (h,v)]\n    let rows = [for v in allVertical do yield makeHLine v] \n    rows\n\nlet columns =\n    let makeVLine h = [for v in allVertical do yield (h,v)]\n    let columns = [for h in allHorizontal do yield makeVLine h] \n    columns\n \nlet diagonals =\n    let diagonal1 = [Left,Top; Middle,Center; Right,Bottom]\n    let diagonal2 = [Left,Bottom; Middle,Center; Right,Top]\n    [diagonal1;diagonal2] \n\u0060\u0060\u0060\n*)\n\n(******)\n\n(**\n### Task 2.5\nThe game can end as a draw. This is always the case if no one won the game and all cells have a state different from empty. \nWrite a function that checks for a draw:\n*)\n\n(******)\n\n(**\n.... With the abstraction done and all these functions at hand, we will finish the game together during the meeting...\n*)"},{"uri":"/BIO-BTE-12-V-4/tasks/english/wpb-task-05.html","title":"Task 05","content":"(**\n---\ntitle: Task 05\ncategory: Tasks(english)\ncategoryindex: 3\nindex: 6\n---\n*)\n\n(**\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/csbiology/BIO-BTE-12-V-4/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Task05 - Programming with Objects \n\n## Mutable values\n\n### Task 1.1:\n\nCreate and change mutable values\n\nHint: \n\n- Use the \u0060mutable\u0060 keyword\n- For changing mutable values, use the \u0060\u003C-\u0060 operator \n\n### Subtask 1.1.1\n\nCreate a mutable integer of value 1 and bind it to the name x\n\n*)\n(******)\n\n\n(**\n### Subtask 1.1.2\n\nChange the value which is bound to x to its previous value multiplied by 5\n*)\n(******)\n\n(**\n### Subtask 1.1.3\n\nCreate a record type \u0060Human\u0060 with\n\n- the immutable field \u0060Name\u0060 of type string\n- and the mutable field \u0060Age\u0060 of type int\n*)\n(******)\n\n(**\n### Subtask 1.1.4\n\nCreate the the function \u0060celebrateBirthday\u0060, which takes one parameter of type \u0060Human\u0060 and increments the \u0060Age\u0060 of the human by one.\n*)\n(******)\n\n(**\n### Subtask 1.1.5\n\nCreate a \u0060Human\u0060, bind it to a name and let him age by applying the \u0060celebrateBirthday\u0060 function on him.\n*)\n(******)\n\n(**\n### Task 1.2 (Bonus taks) Mutable values in functions\n\nCreate your own version of the \u0060Array.max\u0060 function. This function should take an array of ints as a parameter and return the highest value of this array.\nSignature: \u0060int [] -\u003E int\u0060\n\nIn the function, the currently highest int is supposed to be stored as a \u0060mutable value\u0060 and you should use a \u0060for-loop\u0060.\n\n*)\n(******)\n\n(**\n\n## Vererbung\n\n### Task 2.1 Creating classes and objects\n\n### Subtask 2.1.1\n\nHere the class \u0060Vehicle\u0060 gets declared. Try to comprehend what happens and shortly comment each line\n\n_keyword treasure trove_: method, field, constructor, parameter, alternative, bind\n\n*)\n(******)\n\n// Comment:\ntype Vehicle (manufacturer:string) =\n    // Comment:\n    member self.Manufacturer = manufacturer\n    // Comment:\n    member self.Drive() = printfn \u0022%s makes wroooom\u0022 self.Manufacturer\n    // Comment:\n    new() = Vehicle(\u0022Cadillac\u0022)\n\n\n(**\n### Subtask 2.1.2\n\nInstantiate 2 objects of type \u0060Vehicle\u0060. In one case use the main constructor and in the other use the alternative constructor.\n*)\n(******)\n\n(**\n### Task 2.2 Inheritance\n\n### Subtask 2.2.1\n\nHere is an example for the inheritance of a class. The class \u0060Motorcycle\u0060 inherits from the class \u0060Vehicle\u0060\n\nAnalogously, create the class \u0060Car\u0060, which also inherits from \u0060Vehicle\u0060. Additionally, it should have the field \u0060NumDoors\u0060. \nFor this, choose an appropriate primitive type and adjust the constructor to allow for setting the number of doors when instantiating a car object.\n*)\n(******)\n\ntype Motorcycle (manufacturer:string) =\n\n    inherit Vehicle(manufacturer)\n\n    new() = Motorcycle(\u0022Kawasaki\u0022)\n\n(**\n### Subtask 2.2.2\n\nCreate a function which has a parameter of type \u0060Vehicle\u0060 and calls the \u0060Drive\u0060 method of this vehicle.\n*)\n(******)\n\n(**\n### Subtask 2.2.3\n\nInstantiate a \u0060Car\u0060 and bind it to a name. Use the function defined in subtaks 2.2.2 to let the car drive\n*)\n\n(**\n### Task 2.3 (Bonus task) Mutable values in objects\n\nDefine a class \u0060Convertible\u0060 which inherits from \u0060Vehicle\u0060. \n\nThis class should contain a field \u0060RoofOpen\u0060 of type \u0060bool\u0060 and additionally methods for closing and opening its roof.\n*)\n\n\n\n(**\n## Polymorphismus\n\n### Task 3.1\n\nWe want to implement people which can say their name. In Japan, usually the surname is stated prior to the given name. In germany it\u0027s the other way round.\nThe singer known as Yoko Ono in germany therefore is known as Ono Yoko in Japan. To express this difference programmatically, we wrote the following code:\n\nAssign the following keywords to the codeblocks below: \u0060Class declaration\u0060, \u0060Object instantiation\u0060, \u0060Interface declaration\u0060\n\n*)\n(******)\n\n// Keyword:\ntype IPerson =\n    abstract Surname    : string\n    abstract GivenName  : string\n    abstract SayName    : unit -\u003E string\n\n// Keyword:\ntype Japanese (sn, gn) =\n    let surname = sn\n    let givenName = gn\n    interface IPerson with\n        member self.Surname = surname\n        member self.GivenName = givenName\n        member self.SayName () = surname \u002B \u0022 \u0022 \u002B givenName\n\n// Keyword:\ntype German (sn, gn) =\n    let surname = sn\n    let givenName = gn\n    interface IPerson with\n        member self.Surname = surname\n        member self.GivenName = givenName\n        member self.SayName () = givenName \u002B \u0022 \u0022 \u002B surname\n\n// Keyword:\nlet yokoOno = Japanese(\u0022Ono\u0022,\u0022Yoko\u0022)\n\n// Keyword:\nlet angeloMerte = German(\u0022Merte\u0022,\u0022Angelo\u0022)\n\n(**\n### Task 3.2\n\nCall the method \u0060NamenSagen\u0060 of both persons. \n\nHint: Use the correct \u0060casting Operator\u0060\n*)\n(******)\n\n(**\n### Task 3.3\n\nShortly explain in your own words, why we used polymorphism instead of inheritance in this example.\n*)\n(******)\n\n(**\n### Task 3.4\n\nIn the mystic country Bambaloozle the surname of a person gets said prior to the given name, just like in Germany. But: Both names get reverted (Angela Merkel -\u003E alegnA lekreM)\n\nDeclare the class \u0060Bambaloose\u0060, which implements the interface \u0060IPerson\u0060.\n\nHint: Use the given string revert function\n\n*)\n(******)\n\nlet revert (s:string) = System.String(s.ToCharArray() |\u003E Array.rev)\n"},{"uri":"/BIO-BTE-12-V-4/tasks/english/wpb-task-02.html","title":"Task 02","content":"(**\n---\ntitle: Task 02\ncategory: Tasks(english)\ncategoryindex: 2\nindex: 3\n---\n*)\n\n(**\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/csbiology/BIO-BTE-12-V-4/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Task02 - Functions and Data types\n\n## Tuples\n\n### Task 1.1:\n\nDeclare a tuple consisting of 2. and \u0022February\u0022 and bind it to the name \u0060tuple1\u0060.\n*)\n\n(******)\n\n(**\n### Task 1.2:\n\nDeclare a tuple consisting of 2., \u0022February\u0022 and \u0022Spring\u0022 and bind it to the name \u0060tuple2\u0060.\n*)\n\n(******)\n\n(**\n### Task 1.3:\n\nAccess the second value of the tuple of 1.1.\n*)\n\n(******)\n\n(**\n### Task 1.4:\n\nBind \u0060tuple1\u0060 of 1.1 to: \u0060(output1,output2)\u0060.\nWhy could that be useful?\nKeyword: tuple deconstruction\n*)\n\n(******)\n\n(**\n## Record Types\n\n### Task 2.1: \n\nDefine a record type with the name \u0060Person\u0060. Person should contain the fields \u0060Name\u0060(string) and \u0060Age\u0060(int).\nPascal case is used for record types instead of camel case (pascal case is like camel case but the first letter is big too).\n*)\n\n(******)\n\n(**\n### Task 2.2:\n\nCreate a value of the type \u0060Person\u0060 with made-up values in its fields and bind it to the name \u0060myPerson1\u0060.\nAccess the field \u0060Age\u0060 of \u0060myPerson1\u0060.\n*)\n\n(******)\n\n(**\n### Task 2.3:\n\nDeclare a function that takes two input parameters und returns a \u0060Person\u0060.\nBind the result of this function to the name \u0060myPerson2\u0060.\n*)\n\n(******)\n\n(**\n### Task 2.4:\n\nDefine another record type with the name \u0060ExtendedPerson\u0060. ExtendedPerson shall have the same fields like \u0060Person\u0060 but get the\nadditional field \u0060Hobby\u0060. Since everything can be your hobby, \u0060Hobby\u0060 shall be of generic type.\nHint: The generic type must be stated between the name of the record type and \u0060=\u0060 via \u0060\u003C\u0027a\u003E\u0060.\n*)\n\n(******)\n\n(**\n### Task 2.5\n\nCreate a value of the type \u0060ExtendedPerson\u0060.\n*)\n\n(******)\n\n(**\n## Signatures\n\n### Task 3.1\n\nDeclare an arbitrary function with the signature \u0060int -\u003E int\u0060.\n*)\n\n(******)\n\n(**\n### Task 3.2\n\nDeclare an arbitrary function with the signature \u0060int -\u003E (int -\u003E int) -\u003E float\u0060.\n*)\n\n(******)\n\n(**\n### Task 3.3\n\nDescribe the return value of a function with the signature \u0060char -\u003E (string -\u003E char -\u003E float)\u0060.\n*)\n\n(******)\n\n(**\n## Collection types\n\n### Task 4.1\n\nCreate an int list with the numbers 1 to 100 and bind them to a name.\n*)\n\n(******)\n\n(**\n### Task 4.2\n\nBind the first and the last element of the list each to a name.\n*)\n\n(******)\n\n(**\n### Task 4.3\n\nCreate a float array with the numbers 1. to 100. and bind them to a name.\n*)\n\n(******)\n\n(**\n### Task 4.4\n\nBind the 15. element of the array of 4.3 to a name.\n*)\n\n(******)\n\n(**\n### Task 4.5\n\nCreate a map that contains all months. Use the number of the month (integer) as key and the name (string) as value.\n*)\n\n(******)\n\n(**\n### Task 4.6\n\nCheck, based on a suitable key, if the month March exists in the map.\n*)\n\n(******)\n\n(**\n### Task 4.7\n\nCreate two sets. One with numbers 1 to 10 and another one with numbers 3 to 7 and bind them each to a name.\n*)\n\n(******)\n\n(**\n### Task 4.8 \n\nCompare the previously created sets. Form the intersection (instersect) and the union of both sets and bind them each to a name.\nHint: Use the module Set to get suitable functions via \u0027dotting in\u0027.\n*)\n\n(******)"},{"uri":"/BIO-BTE-12-V-4/tasks/english/wpb-task-03.html","title":"Task 03","content":"(**\n---\ntitle: Task 03\ncategory: Tasks(english)\ncategoryindex: 3\nindex: 4\n---\n*)\n\n(**\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/csbiology/BIO-BTE-12-V-4/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Task03 - Control Flow\n\n\n## If-then-else\n\n### Task 1.1:\n\nDeclare a function that takes a parameter \u0060x\u0060 of type \u0060float\u0060. It shall return the value if \u0060x\u0060 is greater than zero. If that is not the case, it shall return the value with the \nsign inversed.  \nHint: Multiplication\n\n*)\n\n(******)\n\n(**\n\n### Task 1.2:\n\nDeclare a function that gets three numbers as parameters. The biggest of the three numbers shall be returned as the result.  \nHint: \u0060elif\u0060!\n\n*)\n\n(******)\n\n(**\n\n### Task 1.3:\n\nDeclare a function that gets a year as parameter. If it is a leapyear, the result shall be \u0060true\u0060 else \u0060false\u0060.\nHints:  \n- If the year can be divided by four but not by 100, it is a leapyear. The year 2008 falls under this rule.  \n- If the year can be divided by 100 but not by 400, it is no leapyear. 2100 will be no leapyear.  \n- If the year can be divided by 400, it always is a leapyear. Because of this, the year 2000 was a leapyear.\n\n*)\n\n(******)\n\n(**\n\n## Pattern matching\n\n### Task 2.1:\n\nDelcare a function with the same attributes as described in Task 1.1. Spare i-then-else expressions and use pattern matching.  \nHint: Guarding Rules \u0026 Wildcard\n\n*)\n\n(******)\n\n(**\n\n### Task 2.2:\n\nUnionCase definition \u0060Month\u0060 is given:\n\u0060\u0060\u0060fsharp\ntype Month =\n    | January\n    | February\n    | March\n    | April\n    | May\n    | June\n    | July\n    | August\n    | September\n    | Oktober\n    | November\n    | December\n\u0060\u0060\u0060\n\nas well as UnionCase definition \u0060Season\u0060:\n\u0060\u0060\u0060fsharp\ntype Season =\n    | Spring\n    | Summer\n    | Autumn\n    | Winter\n\u0060\u0060\u0060\n\nDeclare a function with parameter \u0060m\u0060 of type \u0060Month\u0060. Use pattern matching to assign every month to a season.\n\n*)\n\n(******)\n\n(**\n\n### Task 2.3:\n\nPattern matching is very useful for deconstructing data structures. Declare a function that gets Record type \u0060Person\u0060 (as seen in Task 2) and returns \u0060true\u0060 if the\nsurname is \u0060Mueller\u0060.\nHint: https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/records#pattern-matching-with-records\n\n*)\n\n(******)\n\n(**\n\n## Loops\n\n### Task 3.1:\n\nDeclare a function that gets parameter \u0060n\u0060 of type \u0060int\u0060.  \nThe function shall print all numbers from 1 to n into the console (Hint: \u0060printfn\u0060). Use a for loop.\n\n*)\n\n(******)\n\n(**\n\n### Task 3.2:\n\nDeclare a function that gets parameter \u0060n\u0060 of type \u0060int\u0060.  \nThe function shall save all numbers from 1 to n in a list.  \nHints: Sequence expressions, comprehesions  \nExtra point: Only write all even numbers in a list; Hints: if-then-else, modulo.\n\n*)\n\n(******)\n\n(**\n\n### Task 3.3:\n\nDeclare a function that gets a parameter \u0060n\u0060 of type \u0060int\u0060 and a parameter \u0060f\u0060 with signature \u0060(int -\u003E int)\u0060.  \nThe function shall apply \u0060f\u0060 onto all numbers from 1 to n and save them in a list.  \nHints: Sequence expressions, comprehensions  \n\n*)\n\n(******)\n\n(**\n\n## Rekursion\n\n### Task 4.1:\n\nModify the following function (as seen in the lecture), so that it displays in the end how many steps have been overcome.\n\u0060\u0060\u0060fsharp\nlet rec climbStep nSteps position =\n    if position = nSteps \u002B 1 then\n        printfn \u0022Puh, done\u0022\n    else\n        printfn \u0022I should do more sports\u0022\n        climbStep nSteps (position \u002B 1)\n\u0060\u0060\u0060\n\n*)\n\n(******)\n\n(**\n\n### Task 4.2:\n\nModify the following function (as seen in the lecture), so that it returns -1 if it is expected that the result will be greater than 1000.  \nHint: Use the \u0060print\u0060 function to visualize intermediate result and to better understand the function. E.g.: \u0060printfn \u0022n:%i, acc\u0027:%i\u0022 n acc\u0060.\n\u0060\u0060\u0060fsharp\nlet rec factorial acc n  =\n    if n = 1 then\n        acc \n    else\n        let acc\u0027 = n * acc\n        factorial acc\u0027 (n-1)\n\nfactorial 1 4\n\u0060\u0060\u0060\n\n*)\n\n(******)"},{"uri":"/BIO-BTE-12-V-4/tasks/english/wpb-task-01.html","title":"Task 01","content":"(**\n---\ntitle: Task 01 \ncategory: Tasks(english)\ncategoryindex: 3\nindex: 2\n---\n*)\n\n(**\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/csbiology/BIO-BTE-12-V-4/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Task01 - Hello F#\n\n-------------------------------\n\n\nLet\u0027s start with the basics:\n\n- **In a .fsx script:** \n\n    Highlight the \u002710\u0027 and press Alt\u002BEnter, which will open a console and give the output \u0027val it: int = 10\u0027.\n    (If the code to execute has only one line, you can just click into the line and press Alt\u002BEnter without highlighting.)\n\n- **In a notebook:**\n\n    There is a \u0027play\u0027 button in the left upper corner of the field below. Press it to execute the respective code block, \n    which in this case will simply give \u002710\u0027 as output. \n\n    **Note that you always have to end codeblocks in notebooks with the value you want to put out**\n\n*)\n\n10\n\n(**\nWorking in this interactive way has the advantage that you can always directly test your code and look at the output.\nTry it with the line below and appreciate that the result of the calculation is 30.\n*)\n\n10 \u002B 20\n\n(**\nEverything after a \u0060//\u0060 or inside of \u0060(* ... *)\u0060 is treated as a comment and will not get executed as code.\nYou can use \u0060(* ... *)\u0060 to comment parts of a single line. \nThe standard keybinding for commenting a selection is (Strg \u002B K -\u003E Strg \u002B C)\n\n*)\n\n10 (*\u002B 40 *) \u002B 30\n\n(**\nIf you not quite get a task right, please submit partial solutions or trails of thought as comments to get partial points!\n\n## Das \u0027let\u0027-Binding\n\n## Task 1\n\n### Task 1.1\n\nBind the value 10 to the name \u0027x\u0027. Bind the value 20 to the name \u0027kaesebrot\u0027.\n*)\n\n(******)\n\n(**\n### Task 1.2\n\nBind the result of the Addition of \u0027x\u0027 and 10 to the name \u0027y\u0027.\n*)\n\n(******)\n\n(**\n### Task 1.3\n\nBind any first name as string to \u0027vorname\u0027.\n*)\n\n(******)\n\n(**\n### Task 1.4\n\nCalculate the remainder of 432858049/41 and bind the result to \u0027modulo\u0027\n*)\n\n(******)\n\n(**\n### Task 1.5\n\nBinde the sum of both sums (x \u002B 10) and (y \u002B 20) to the Name \u0027sumXY\u0027. \nDie Zwischenergebnisse sollten nicht im globalen Sichtbarkeitsbereich (Scope) liegen.\n*)\n\n(******)\n\n(**\n## Die \u0022printfn\u0022 - Funktion\n\n### Task 2\n\n_Tipp: https://docs.microsoft.com/de-de/dotnet/fsharp/language-reference/plaintext-formatting_\n\n### Task 2.1:  \n\nUse the printfn function to print \u0022Hello F#\u0022 to the console.\n*)\n\n(******)\n\n(**\n### Task 2.2:  \n\nUse the printfn function to print the value of \u0027vorname\u0027 to the console.\n*)\n\n(******)\n\n(**\n### Task 2.3:  \n\nUse the printfn function to print the value of \u0027y\u0027 to the console.\n*)\n\n(******)\n\n(**\n## Primitive Datentypen und Funktionen\n\n### Task 3\n\n### Task 3.1\n\nBind an arbitrary integer value to the name intI.\n*)\n\n(******)\n\n(**\n### Task 3.2\n\nBind an arbitrary float value to the name floatI.\n*)\n\n(******)\n\n(**\n### Task 3.3\n\nConvert one of intI or floatI to the data type of the other and sum both up.\n*)\n\n(******)\n\n(**\n### Task 3.4\n\nCalculate the integer division of \u002727\u0027 und \u002713\u0027. Then perform the same operation but on \u002727\u0027 and \u002713\u0027 as float values.\n*)\n\n(******)\n\n(**\n### Task 3.5:\n\nConcatenate an arbitrary string value with an arbitrary char (character)\n*)\n\n(******)\n\n(**\n### Task 3.6:\n\nDeclare a function named \u0027mulitplyBy2\u0027 that doubles a single input float.\n\n*)\n\n(******)\n\n(**\n### Task 3.7:  \n\nDeclare a function named \u0027calculateCylinderVolume\u0027 that takes radius and length of a cylinder as inputs and \nreturns the cylinders volume AND additionally prints the message \u0022The volume of the cylinder is XXX\u0022 (where XXX is the volume)\n\nWhy can it make sense to print values inside a function before returning a value?\n*)\n\n(******)\n\n(**\n### Task 3.8:  \n\nDeclare a function that takes an integer as input, converts it, and applies the previously defined \u0027multiplyBy2\u0027 function on it.\n\n*)\n\n(******)\n\n(**\n### Task 3.9:  \n\nDeclare a function that takes the feollowing inputs:\n\n- two floats\n- a comparison operator (\u003C, \u003E, = )\n- a boolean\n\nThe function should then compare the result of applying the operator to the two \nfloat inputs with the boolean input and return the result.\n\n(_2 Points_)\n\n*)\n\n(******)"},{"uri":"/BIO-BTE-12-V-4/tasks/english/installation-instructions.html","title":"Getting Started","content":"(**\n---\ntitle: Getting Started\ncategory: Tasks(english)\ncategoryindex: 3\nindex: 1\n---\n\n# Getting Started\n\n## Installation instructions\n\n* Download the latest stable build for [Visual Studio Code](https://code.visualstudio.com/) and install it.\n* Download the recommended [.NET SDK](https://dotnet.microsoft.com/download) for your operating system and install it.\n\n    ![]({{root}}img/DotnetSDK.png)\n\n* Open Visual Studio Code, navigate to the \u0022Extensions\u0022 tab and install\n    * .NET Interactive Notebooks\n    * Ionide-fsharp\n    \n    ![]({{root}}img/CodeExtensions.png)\n\n\n## Working on Exercises\n\nThere are three different possibilities to work on the exercises:\n\n* Locally as notebook in Visual Studio Code\n* Locally as fsx in Visual Studio Code\n* Online as notebook on Binder\n\n### Locally as notebook in Visual Studio Code\n\n* Download the current notebook from the page linked on the left.\n\n    ![]({{root}}img/DownloadNotebook.png)\n\n* In Visual Studio Code press \u0060Ctrl \u002B Shift \u002B P\u0060 or \u0060F1\u0060 and klick on \u0060.NET Interactive Open notebook\u0060.\n\n    ![]({{root}}img/OpenNotebook.png)\n\n* Navigate to the location of your notebook and open it.\n* Notebooks contain Text- and Codeblocks:\n    * Adding a new Text- or Codeblock can be done by hovering at the upper or lower border of an existing block:\n\n    ![]({{root}}img/AddingBlock.png)\n\n    * Working with Textblocks:\n        You can edit a Textblock by doubleklicking on it. Inside a Textblock you can write plain text or style it with [Markdown](https://en.wikipedia.org/wiki/Markdown).\n        Once you are finished you can press the \u0060Esc\u0060 button.\n    * Working with Codeblocks:\n        You can start editing any Codeblock by clicking in it. In there you can start writing your own code or edit existing code. Once you are done you can execute the Codeblock by pressing \u0060Ctrl \u002B Alt \u002B Return\u0060.\n        If you want to execute all codeblocks at once, you can press on the two arrows in the upper right corner of the notebook:\n\n    ![]({{root}}img/ExecuteAll.png)\n\n### Locally as fsx in Visual Studio Code\n\n* Download the current fsx from the page linked on the left.\n\n    ![]({{root}}img/DownloadScript.png)\n\n* In Visual Studio Code press \u0060Ctrl \u002B O\u0060, navigate to the location of your fsx and open it.\n* You can write code anywhere in the fsx file, similar to a normal text file, and execute it by pressing \u0060Alt \u002B Return\u0060\n    * Pressing \u0060Alt \u002B Return\u0060 in a line will execute the current line\n    * Marking a section and pressing \u0060Alt \u002B Return\u0060 will execute the marked section\n* You can comment your code by prefixing your comment with \u0022//\u0022 (e.g.: // My Comment)\n\n### Online as notebook on Binder\n\n* Open the current notebook from the page linked on the left.\n\n    ![]({{root}}img/RunBinder.png)\n\n* Notebooks contain Text- and Codeblocks:\n    * Adding a new Text- or Codeblock can be done by clicking \u0060Insert\u0060 at the top of the page and choosing \u0060Code\u0060 or \u0060Markdown\u0060 as property:\n\n    ![]({{root}}img/BinderAddingBlock.png)\n\n    * Working with Textblocks:\n        You can edit a Textblock by doubleklicking on it. Inside a Textblock you can write plain text or style it with [Markdown](https://en.wikipedia.org/wiki/Markdown).\n        Once you are finished you can press \u0060Ctrl \u002B Return\u0060.\n    * Working with Codeblocks:\n        You can start editing any Codeblock by clicking in it. In there you can start writing your own code or edit existing code. Once you are done you can execute the Codeblock by pressing \u0060Ctrl \u002B Return\u0060.\n        If you want to execute all codeblocks at once, you can klick on the two arrows at the top of the notebook:\n\n    ![]({{root}}img/BinderExecuteAll.png)\n\n*)\n"},{"uri":"/BIO-BTE-12-V-4/tasks/german/wpb-task-07.html","title":"\u00DCbung 07","content":"(**\n---\ntitle: \u00DCbung 07\ncategory: \u00DCbungen(deutsch)\ncategoryindex: 2\nindex: 8\n---\n*)\n\n(**\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/csbiology/BIO-BTE-12-V-4/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Datenvisualisierung mit Plotly.NET\n\n**Verwenden Sie fuer alle Diagramme stets adequate Skalenbeschriftungen.**\n\n**Der Code fuer die Erstellung der Charts reicht aus, Sie muessen keine Bilder einreichen.**\n\n## 0 Vorwort\n\nDie Plotly.NET Dokumentation finden sie hier: https://plotly.net\n\n### Referenzieren von Plotly.NET\n\nDiese Zeilen m\u00FCssen immer mindestens 1 mal ausgef\u00FChrt werden, sonst kann das Plotly.NET Softwarepaket nicht verwendet werden:\n*)\n#r \u0022nuget: Plotly.NET, 2.0.0-preview.1\u0022\n#r \u0022nuget: Plotly.NET.Interactive, 2.0.0-preview.1\u0022\nopen Plotly.NET\n\n(**\nBei dieser Uebung unterscheiden sich die Arbeitsweisen bezueglich des Anzeigens der erstellten Diagramme in Notebooks und .fsx Skripten grundlegend:\n\n### Anzeigen von Charts in .fsx Skripten\n\nIn .fsx Skripten sollte die \u0060Chart.Show\u0060 Funktion verwendet werden, welche ein Browserfenster \u00F6ffnet um Diagramme anzuzeigen:\n*)\n\n(***do-not-eval***)\nChart.Point([(1,1); (2,2)])\n|\u003E Chart.withTitle \u0022hello from .fsx\u0022\n|\u003E Chart.Show\n\n(**\n### Anzeigen von Charts in Notebooks\n\nIn Notebooks kann zwar auch die Chart.Show Funktion verwendet werden, dank der oben referenzierten \u0060Plotly.NET.Interactive\u0060 \nErweiterung kann allerdings auch einfach der jeweilige Codeblock mit dem value des Charts beendet werden (so wie auch bei anderen Werten gewohnt), \num den Chart direkt in der Ausgabezelle anzuzeigen:\n\n*)\n\nChart.Point([(1,1); (2,2)])\n|\u003E Chart.withTitle \u0022hello inside the notebook\u0022\n\n(**\n## 1 Visualisierung von X/Y Beziehungen\n\n### Task 1.1\n\nErstellen Sie eine Liste, welche die Werte von 0.0 bis (4 * PI) mit einer Schrittgroesse von 0.001 enthaelt.\nbinden Sie diese liste an den Namen \u0027xValues\u0027\n\n*)\n\n(******)\n\n(**\n### Task 1.2\n\nErstellen Sie zwei Listen, die die passenden Funktionswerte von sin(x) und cos(x) fuer \u0027xValues\u0027 enthalten.\n\n_Tipp: benutzen Sie die map Funktion_\n*)\n\n(******)\n\n(**\n\n### Task 1.3\n\nErstellen Sie zwei Punkt- und zwei Liniendiagramme in denen Sie die Werte von \u0027xValues\u0027 und die jeweiligen\nFunktionswerte von sin(x) oder cos(x) auf je eine Positionsskala abbilden. Am Ende sollten Sie 4 einzelne \nDiagramme haben.\n*)\n\n(******)\n\n(**\n### Task 1.4\n\n**a)** Kombinieren Sie die Punkt- und Liniendiagramme aus 1.3. in einem einzigen Koordinatensystem (zu einem einzigen Diagramm mit 4 Unterdiagrammen). \n\n_Tipp: Benutzen Sie Chart.Combine_\n\n**b)** Warum ist das Resultat ein Diagramm mit einer zusaetzlichen Dimension, bzw. was ist die zus\u00E4tzlich abgebildete Dimension?\n*)\n\n(******)\n\n(**\n### Task 1.5 \n\nVisualisieren Sie die (x,y) tuple in der folgenden Liste zunaechst mit einer linearen X und Y Skala.\nTransformieren Sie die Daten mit einer nichtlinearen Transformation, die Ihnen sinnvoll erscheint und \nvisualisieren Sie das Ergebnis. \n\n_Tipp: sollten Sie anstatt der Daten die Achse transformieren wollen:_\n\u0060Chart.withY_Axis( Axis.LinearAxis.init(StyleParam.AxisType. ...)  )\u0060\n*)\n\nlet someData = [0. .. 1. .. 10.] |\u003E List.map (fun x -\u003E x,(10. ** x))\n\n(**\n## 2 Visualisierung von Anzahl/Groessen\n\n### Task 2.1 \n\nVisualisieren Sie die Abundanz verschiedener Haarfarben der Teilnehmer des Kurses. Falls keine Erhebung \ngemacht werden soll, denken Sie sich einen Datensatz mit 5 verschiedenen Haarfarben und 20 Probanden aus.\n\n_Tipp: erstellen Sie entweder eine Liste mit (Haarfarbe,Abundanz) tupeln oder je eine Liste fuer Haarfarbe und Abundanz_\n*)\n\n(******)\n\n(**\n### Task 2.2\n\nVisualisieren Sie die Menge an erzeugten Terawattstunden in Deutschland nach verschiedenen Energietraeger im Jahr 2020 hinsichtlich der absoluten Zahlen als Balkendiagramm, sortiert nach Groesse der Strommenge\n\n_Quelle der Daten:_ https://de.wikipedia.org/wiki/Stromerzeugung#Bruttostromerzeugung_nach_Energietr%C3%A4gern_in_Deutschland\n*)\n\n(******)\n\n(**\n### Task 2.3 \n\nDatenvisialisierung kann oft zur Erkennung von Mustern in einem Datensatz fuehren, die bei blosser \nBetrachtung der Werte nicht ersichtlich waeren, besonders wenn der Datensatz sehr gross und/oder \nmehrdimensional ist. \n\nDer vorbereitete Testdatensatz enthaelt 3 Dimensionen: die Indices des aeusseren Arrays, die Indices der \ninneren Arrays, und die tatsaechlichen Zahlenwerte in den inneren Arrays. Visualisieren Sie die drei \nDimensionen mithilfe einer Heatmap.\n\nWelche Information koennte in den 3 Dimensionen kodiert sein? Beschriften Sie die x und y Skalen nach Ihrer \nEinschaetzung.\n\n*)\n\nlet data3D =\n    [|\n        [|2.;2.;2.;2.;2.;2.;2.;2.;2.|]\n        [|2.;2.;0.;0.;1.;0.;0.;2.;2.|]\n        [|2.;0.;0.;3.;3.;3.;0.;0.;2.|]\n        [|2.;0.;3.;0.;0.;0.;3.;0.;2.|]\n        [|2.;0.;3.;0.;0.;0.;3.;0.;2.|]\n        [|2.;0.;0.;0.;3.;0.;0.;0.;2.|]\n        [|2.;0.;0.;0.;0.;0.;0.;0.;2.|]\n        [|2.;0.;3.;0.;0.;0.;3.;0.;2.|]\n        [|2.;2.;0.;0.;0.;0.;0.;2.;2.|]\n        [|2.;2.;2.;1.;1.;1.;2.;2.;2.|]\n    |]\n\n(**\n## 3   Visualisierung von Proportionen\n\n### Task 3.1 \n\nVisualisieren Sie das Ergebnis der Landtagswahl in einem beliebigen Bundesland.\n\n_Quelle der Daten:_ https://de.wikipedia.org/wiki/Liste_der_letzten_Landtagswahlergebnisse_in_Deutschland\n*)\n\n(******)\n\n(**\n### Task 3.2 \nVergleichen Sie die Stimmanteile aus 3.1 visuell mit mindestens 3 weiteren Landtagswahlergebnissen aus \nanderen Bundeslaendern.\n*)\n\n(******)\n\n(**\n### Task 3.3 \nVisualisieren Sie die Daten aus 2.2 hinsichtlich ihres relativen Anteils an der Gesamtstromerzeugung als Doughnut-Chart \n\n_Tipp: Chart.Doughnut; Sie muessen die Ursprungsdaten jeweils durch die Gesamtmenge an erzeugten kWh Teilen._\n*)\n\n(******)\n\n(**\n### 4 Visualisierung von geographischer Lage\n\n### Task 4.1\n\nVisualisieren Sie den Anteil der 16 bevoelkerungsreichsten Laender an der Gesamtbevoelkerung der Erde. \n\n_Quelle der Daten:_ https://de.wikipedia.org/wiki/Weltbev%C3%B6lkerung#Die_bev%C3%B6lkerungsreichsten_Staaten\n\n_Tipp: Chart.Choropleth. Idealerweise aehnelt ihr Ergebnis der Abbildung auf Wikipedia._\n*)\n\n(******)\n\n(**\n## 5 Bonus\n\nErstellen Sie ein Klimadiagramm fuer Kaiserslautern\nHierzu muessen verschiedene Charttypen miteinander kombiniert werden.\n\n_Quelle der Daten:_ https://de.climate-data.org/europa/deutschland/rheinland-pfalz/kaiserslautern-2135/\n\n*)\n\n(******)"},{"uri":"/BIO-BTE-12-V-4/tasks/german/wpb-task-04.html","title":"\u00DCbung 04","content":"(**\n---\ntitle: \u00DCbung 04\ncategory: \u00DCbungen(deutsch)\ncategoryindex: 2\nindex: 5\n---\n*)\n\n(**\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/csbiology/BIO-BTE-12-V-4/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Task04 - Programming with functions\n\n## Funktionen h\u00F6herer Ordnung\n\n### Task 1.1:\n\nSchreibe folgende Funktion mit Hilfe des Pipe-Operators \u0060|\u003E\u0060 und den angegebenen Funktionen.\n\nTipp: \n\n  - Der Pipeoperator setzt den Parameter links vom Operator ans Ende der rechten Seite: \n\n  - \u0060a |\u003E add b\u0060 ist gleichbedeutend mit \u0060add b a\u0060\n*)\n(******)\n\nlet mathNotation x y = ((2. \u002B 3. * (x \u002B 1.))**2.) * y\n\nlet add (a:float) b = a \u002B b\nlet square (x :float) = x * x\nlet multiply (a:float) b = a * b\n\nlet pipeNotation x y =\n    1. //ersetzt mich\n\n// Test ob beide notationen das gleiche Ergebnis erzeugen\npipeNotation 1. 7. = mathNotation 1. 7.\n\n\n(**\n\n### Task 1.2\n\nDeklariere eine beliebige Funktion mit der Signatur \u0060int -\u003E int -\u003E int\u0060. Achte darauf, dass alle Parameter im Funktionsk\u00F6rper verwendet werden.\n\nIst dies eine Funktion erster Ordnung oder eine Funktion h\u00F6herer Ordnung?\n\n*)\n(******)\n\n(**\n### Task 1.3\n\nDeklariere eine beliebige Funktion mit der Signatur \u0060int -\u003E int -\u003E (int -\u003E int -\u003E int) -\u003E float\u0060. Achte darauf, dass alle Parameter verwendet werden.\n\nIst dies eine Funktion erster Ordnung oder eine Funktion h\u00F6herer Ordnung?\n\n*)\n(******)\n\n(**\n### Task 1.4\n\nRufe die in \u00601.3\u0060 erstellte Funktion auf. Nutze als Parameter zwei beliebige Werte sowie die Funktion aus \u00601.2\u0060.\n\n*)\n(******)\n\n\n(**\n\n## Programmieren mit Funktionen\n\n### Task 2.1.1\n\nUnten siehst du einen record type mit dem Namen \u0060Cat\u0060. \nErstelle zwei beliebige Werte des Typs \u0060Cat\u0060 und binde sie an beliebige Namen.\nSchaut euch \u0060\u00DCbung 02\u0060 an, falls es hier Schwierigkeiten geben sollte.\n\n*)\n(******)\n\ntype Cat = {\n    Name    : string\n    Weight  : float\n    Color   : string\n    Age     : int}\n\n(**\n### Task 2.1.2\n\nDeklariere eine Funktion mit dem Namen \u0060getWeight\u0060, die als Parameter eine \u0060Cat\u0060 erh\u00E4lt und deren Gewicht zur\u00FCck gibt. \n\n*)\n(******)\n\n(**\n### Task 2.1.3\n\nDu kannst keine mathematischen Standard-Operatoren auf record typen anwenden. \nDeklariere eine Funktion mit dem Namen \u0060applyToWeight\u0060, die zwei Parameter vom Typ \u0060Cat\u0060 (c1 und c2) und einen Parameter vom Typ \u0060(float -\u003E float -\u003E float)\u0060 (f) erh\u00E4lt. \nIm Funktionsk\u00F6rper soll die Funktion f auf die Gewichte der beiden Katzen c1 und c2 angewendet werden.\n\nTipp: Definiere die Typen der Parameter. \n\n*)\n(******)\n\n(**\n### Task 2.1.4\n\nWende die Funktion \u0060applyToWeight\u0060 mit den zuvor erstellten \u0060Cats\u0060 und der Funktion \u0060averageOfTwo\u0060 an.  \n\n*)\n(******)\n\nlet averageOfTwo (a:float) b =\n    (a \u002B b) / 2.\n\n(**\n### Task 2.2 (optional)\n\nDiese Aufgabe muss nicht gel\u00F6st werden! Sie dient dazu eine \u0060Cat list\u0060 zu erstellen, die an sp\u00E4terer Stelle ben\u00F6tigt wird.\nWenn du willst, kannst du kommentieren was in den angegebenen Zeilen geschieht (Extrapunkt)\n\n*)\n(******)\n\n// Dies ist ein Zufallsgenerator. \n// Mit randomNumberGenerator.NextDouble() kann nun ein zuf\u00E4lliger float zwischen 0. und 1. erstellt werden.\n// Mit randomNumberGenerator.Next(x) kann nun ein zuf\u00E4lliger int zwischen 0 und x-1 erstellt werden.\nlet randomNumberGenerator = System.Random()\n\n// Nachfolgend ist eine Funktion dargestellt, die einen Wert vom Typ Cat erstellt.\nlet createRandomCat (i :int) = \n    // Kommentar: \n    let name   = \u0022Cat \u0022 \u002B string i \n    // Kommentar: \n    let age    = randomNumberGenerator.Next(16)\n    // Kommentar: \n    let weight = 3. \u002B 5. * randomNumberGenerator.NextDouble()\n    let color  = \n        let colors = [\u0022white\u0022;\u0022red\u0022;\u0022black\u0022;\u0022grey\u0022;\u0022mixed\u0022]\n        // Kommentar: \n        colors.[i%5]\n    // Kommentar: \n    {\n    Name    = name\n    Weight  = weight\n    Color   = color   \n    Age     = age\n    }\n\n// Kommentar: \nlet catList = [for i=1 to 60 do yield createRandomCat i]\n\n\n(**\n### Task 2.3\n\nErstelle eine float List mit den Werten von 0. bis 100. und binde sie an den Namen \u0060nList\u0060.\n\n*)\n(******)\n\n\n(**\n### Task 2.4\n\nMit map-Funktionen kann man eine Funktion, die auf einzelnen Elementen angewendet werden kann auf alle Elemente einer Liste anwenden.\nParameter der \u0060map\u0060-Funktion:\n\n  1. \u0060doSomethingWithX\u0060:  Funktion, die auf jedes Listenelement angewendet werden soll\n\n  2. \u0060list\u0060:              Liste der Elemente, auf die \u0060doSomeThingWithX\u0060 angewendet werden soll\n\nDie \u0060List.map\u0060 Funktion wird dann folgenderma\u00DFen angewendet:\n\n  - \u0060List.map (fun listElement -\u003E doSomethingWithX listElement) list\u0060\n\nWende auf jedes Element von \u0060nList\u0060 die Funktion \u0060square\u0060 (Task 1.1) an. Binde das Ergebnis an den Namen \u0060nListSquared\u0060.\n\n*)\n(******)\n\n(**\n### Task 2.5\n\nExtrahiere alle Gewichte aus \u0027catList\u0027 und binde sie an den Namen \u0060catWeights\u0060.\n\nTipp: Durchsuche das \u0060List\u0060-Modul nach einer passenden Funktion.\n\n*)\n(******)\n\n\n(**\n### Task 2.6\n\nBerechne die Summe der Werte aus \u0060nList\u0060. \n\n*)\n(******)\n\n(**\n### Task 2.7\n\nFiltere alle Listenelemente, die durch 15 teilbar sind.\n\nTipp1: Nutze \u0060List.filter\u0060 und die angegebene Funktion.\n\n*)\n(******)\n\nlet isDivisibleWithoutRemainder denumerator numerator =\n    numerator % denumerator = 0.\n\n(**\n### Task 2.8\n\nBerechne die Summe der Quadrate der einzelnen Werte aus nList.\nVersuche dieses in einem Schritt mit \u0060List.fold\u0060 zu erreichen.\n\n*)\n(******)\n\n(**\n### Task 2.9\n\nBerechne das Durchschnittsgewicht der Katzen aus \u0060catList\u0060. \n\nTipp: Die Aufgabe kann entweder durch die Nutzung von Funktionen aus dem \u0060List\u0060-Modul gel\u00F6st werden, oder man l\u00F6st sie durch eine einzige fold Funktion (f\u00FCr Experten).\n\n*)\n(******)\n"},{"uri":"/BIO-BTE-12-V-4/tasks/german/wpb-task-06.html","title":"\u00DCbung 06","content":"(**\n---\ntitle: \u00DCbung 06\ncategory: \u00DCbungen(deutsch)\ncategoryindex: 2\nindex: 7\n---\n*)\n\n(**\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/csbiology/BIO-BTE-12-V-4/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Typen-gesteuertes Design\u200B - Tic Tac Toe\n\n***Disclaimer 1*** Wir haben einige Blaupausen von Typen und Wertebindungen (e.g. ValidMoves or diagonals) hinzugef\u00FCgt die ihr ben\u00F6tigt um die \u00DCbung abzuschlie\u00DFen, vergesst nicht sie selbst zu implementieren!\n\n***Disclaimer 2*** Diese \u00DCbung ist eure Chance Punkte zu sammeln! Wir werden diese \u00DCbung als \u0027Bonus\u0027 werten, d.h. ihr k\u00F6nnt\nzus\u00E4tzliche Punkte sammeln und damit den Prozentsatz an richtig gel\u00F6sten Aufgaben erh\u00F6hen, nicht aber verringern. Viel Spa\u00DF!\n\nIn dieser Uebung soll das beliebte Spiel Tic Tac Toe implementiert werden. Im Vordergrund stehen - wie in der Vorlesung demonstriert -\ndie Zerlegung des Problems, die Abstraktion einzelner Elemente und Aktionen als Typen und final die Implementation der Logik.\n\n### Task 1.1:\n\nAbgebildet ist ein Tic Tac Toe Spielfeld:\n\u0060\u0060\u0060\n    |-|X|-|\n    |X|O|-|\n    |O|-|-|\n\u0060\u0060\u0060\nDas Spielfeld besteht aus insgesamt 9 Zellen. \nJede Zelle kann gemae\u00DF der Spielregeln drei Zustaende annehmen \n\ni.   leer \n\nii.  Belegt von Spieler X \n\niii. Belegt von Spieler Y. \n\nDefiniere einen Typ der den Status (eng. State) einer Zelle abstrahiert.\n*)\n(******)\n\n(**\n### Task 1.2\n\nDa die relativen Positionen einzelner Felder fuer das Spiel von Bedeutung sind, muss die Position einer Zelle \nebenfalls modelliert werden. Da die Zahl der Felder endlich (9) und das Feld quadratisch ist ergibt sich eine endliche Anzahl\nmoeglicher Positionen. Definiere die noetigen Typen um die Zellposition in der Form HorizontalPosition * VerticalPosition angeben zu koennen.\n\n*)\n(******)\n\n(**\n### Task 1.3\n\nMit dem Zustand der Zelle und ihrer Position kann eine Zelle vollstaendig beschrieben werden. Deklariere einen Record-Typ der diesen Sachverhalt abbildet.\n\n*)\n(******)\n\n(**\n### Task 1.4\n\nDa das Spielfeld aus einzelnen Zellen besteht laesst sich dieses vollstaendig beschreiben, wenn wir den Zustand aller Zellen kennen. Definiere einen Typ\nder das Spielfeld modelliert.\n\n*)\n(******)\n\n\n(**\n### Task 2.1\n\nNun haben wir bereits alle Typen definiert um das Spielfeld zu beschreiben. Im Folgenden ist ein moeglicher Spielverlauf\nschematisch dargestellt: \n                                                                                                                                       \n\u0060\u0060\u0060                                                                                                                                                                                                                                                                   \n     Lust                    |-|-|-|                                               \n     zu         ----------\u003E  |-|-|-|, Liste moeglicher Zuege (bzw. freier Zellen) ODER Ergebnis (Sieger X, Sieger Y oder Unentschieden)\n     spielen      Aktion A   |-|-|-|                                     \n                                                |\n                                                | Aktion B  \n                                                |\n                                                v\n                             |X|-|-|                                               \n                             |-|-|-| und Liste moeglicher Zuege ODER Ergebnis  (Sieger X, Sieger Y oder Unentschieden)                                                                   \n                             |-|-|-|                                     \n                                                |\n                                                | Aktion C \n                                                |\n                                                v  \n                             |X|-|-|                                               \n                             |O|-|-| und Liste moeglicher Zuege ODER Ergebnis (Sieger X, Sieger Y oder Unentschieden)\n                             |-|-|-|                                     \n                                                |\n                                                | Aktion B \n                                                |\n                                                v  \n                             |X|-|-|                                               \n                             |O|X|-| und Liste moeglicher Zuege ODER Ergebnis (Sieger X, Sieger Y oder Unentschieden)\n                             |-|-|-|                                     \n\u0060\u0060\u0060                              \nAktionen(Moves) A, B und C haben entweder ein Ende des Spiels zur Folge (Sieger X, Sieger Y oder Unentschieden), oder \nresultieren in einer upgedateten Version des Spielfeldes, einer Liste weiterer freier Zellen, sowie der naechsten Aktion.\nUm diesen Sachverhalt zu modellieren bietet sich ein Union Case an:\n\u0060\u0060\u0060fsharp\ntype ValidMoves = {\n        Moves:List\u003CCellPosition\u003E\n    }\n\ntype MoveResult = \n    | Win of Player\n    | Tie \n    | Move of Player*GameState*ValidMoves\n\u0060\u0060\u0060\n*)\n\n\n(**\nDefiniere die Aktionen A, B und C als Typen. Nutze dazu den UnionCase MoveResult.\n*)\n\n(******)\n\n(**\n### Task 2.2\nImplementiere eine Funktion, die das Spielfeld erstellt. Der\nRueckgabewert der Funktion soll vom Typ MoveResult sein. Spieler X soll das Spiel beginnen.\nTipp: Gegeben sind Listen aller horizontalen und vertikalen Positionen. \n\n\u0060\u0060\u0060fsharp\nlet allHorizontal = [Left;Middle;Right]\nlet allVertical   = [Top;Center;Bottom] \n\u0060\u0060\u0060\n*)\n\n(******)\n\n(**\n### Task 2.3\nBevor wir gemeinsam die Zuege von Spieler X und Spieler Y implementieren, ueberlegen wir was eine solche Funktion leisten muss.\nDie Funktion wird das Spielfeld manipulieren. Implementiere eine Funktion die einen Parameter vom Typ GameState, einen Parameter vom \nTyp CellPosition und einen Parameter von Typ Player erhaelt. Der Rueckgabewert entspricht dem upgedateten GameState.\n*)\n(******)\n\n(**\n### Task 2.4\nDesweiteren wird die Funktion ueberpruefen muessen ob ein Spiel gewonnen wurde. \nDazu stellen wir uns die Frage: Wann ist das Spiel gewonnen? Das Spiel ist immer dann gewonnen, wenn\nein Spieler eine Spalte, eine Zeile oder eine der beiden Diagonalen vollstaendig besetzt hat. \nImplementiere eine Funktion die einen Parameter vom Typ GameState und einen Parameter vom Typ Player erhaelt. \nDie Funktion soll \u0027true\u0027 zurueckgeben wenn der Spieler gewonnen hat. \nTipp: Gegeben sind alle moeglichen Spalten, Zeilen und Diagonalen.\n\u0060\u0060\u0060fsharp\nlet rows =\n    let makeHLine v = [for h in allHorizontal do yield (h,v)]\n    let rows = [for v in allVertical do yield makeHLine v] \n    rows\n\nlet columns =\n    let makeVLine h = [for v in allVertical do yield (h,v)]\n    let columns = [for h in allHorizontal do yield makeVLine h] \n    columns\n \nlet diagonals =\n    let diagonal1 = [Left,Top; Middle,Center; Right,Bottom]\n    let diagonal2 = [Left,Bottom; Middle,Center; Right,Top]\n    [diagonal1;diagonal2] \n\u0060\u0060\u0060\n*)\n\n\n(******)\n\n\n(**\n### Task 2.5\nNatuerlich kann ein Spiel unentschieden ausgehen. Das ist beispielsweise immer der Fall, sollte niemand\ngewonnen haben und alle Zellen einen anderen State als Empty aufweisen. Schreibe eine Funktion, die das ueberprueft.\n*)\n\n(******)\n\n(**\n.... und in der Uebung werden wir das Spiel gemeinsam beenden...\n*)"},{"uri":"/BIO-BTE-12-V-4/tasks/german/wpb-task-05.html","title":"\u00DCbung 05","content":"(**\n---\ntitle: \u00DCbung 05\ncategory: \u00DCbungen(deutsch)\ncategoryindex: 2\nindex: 6\n---\n*)\n\n(**\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/csbiology/BIO-BTE-12-V-4/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Task05 - Programming with Objects \n\n## Ver\u00E4nderliche Werte\n\n### Task 1.1:\n\nErstellen und Ver\u00E4ndern von ver\u00E4nderlichen Werten\n\nTipp: \n\n- Benutzt das \u0060mutable\u0060 keyword\n- Zur Ver\u00E4nderung der Werte wird der \u0060\u003C-\u0060 Operator verwendet\n\n### Subtask 1.1.1\n\nErstelle einen ver\u00E4nderlichen Integer mit dem Wert 1 und bindet ihn an den Namen x\n\n*)\n(******)\n\n\n(**\n### Subtask 1.1.2\n\nVer\u00E4ndere den Wert der an x gebunden ist indem ihr den Wert den x tr\u00E4gt mit 5 multipliziert \n*)\n(******)\n\n(**\n### Subtask 1.1.3\n\nErstelle einen Record Type \u0060Mensch\u0060 mit \n\n- dem unver\u00E4nderlichen Feld \u0060Name\u0060 vom Typ string\n- und dem ver\u00E4nderlichen Feld \u0060Alter\u0060 vom Typ int\n*)\n(******)\n\n(**\n### Subtask 1.1.4\n\nErstelle die Funktion \u0060geburtstagFeiern\u0060 die als Parameter einen Wert des Typen \u0060Mensch\u0060 erh\u00E4lt und das Alter des Menschen um eins erh\u00F6ht\n*)\n(******)\n\n(**\n### Subtask 1.1.5\n\nErstelle einen Menschen, binde ihn an einen Namen und lass diesen erstellten Menschen mit der Funktion \u0060geburtstagFeiern\u0060 altern.\n*)\n(******)\n\n(**\n### Task 1.2 (Bonusaufgabe) Ver\u00E4nderliche Werte in Funktionen\n\nErstelle eine eigene Version der \u0060Array.max\u0060 Funktion. Diese Funktion soll ein Array von ints erhalten und den gr\u00F6\u00DFten der ints zur\u00FCckgeben.\nSignatur: \u0060int [] -\u003E int\u0060\n\nDabei soll der aktuell gr\u00F6\u00DFte int ein \u0060ver\u00E4nderlicher Wert\u0060 sein und es soll eine \u0060for-Schleife\u0060 verwendet werden.\n\n*)\n(******)\n\n(**\n\n## Vererbung\n\n### Task 2.1 Erstellen von Klassen und Objekten\n\n### Subtask 2.1.1\n\nIm folgenden wird die Klasse \u0060Fahrzeug\u0060 erstellt. Versuche nachzuvollziehen, was passiert und kommentiere jede Zeile kurz\n\nKeywortfundgrube: Methode, Feld, Konstruktor, Parameter, alternativ, binden\n\n*)\n(******)\n\n// Kommentar:\ntype Fahrzeug (hersteller:string) =\n    // Kommentar:\n    member self.Hersteller = hersteller\n    // Kommentar:\n    member self.Fahren() = printfn \u0022%s macht brumm brumm\u0022 self.Hersteller\n    // Kommentar:\n    new() = Fahrzeug(\u0022VW\u0022)\n\n\n(**\n### Subtask 2.1.2\n\nInstanziiere 2 Objekte des Typs \u0060Fahrzeug\u0060. Verwende einmal den den Haupt- und einmal den alternativen Konstruktor\n*)\n(******)\n\n(**\n### Task 2.2 Vererbung\n\n### Subtask 2.2.1\n\nHier ist ein Beispiel f\u00FCr die Vererbung eines Typen, namentlich der Typ \u0060Motorrad\u0060 der vom Typ \u0060Fahrzeug\u0060 erbt. \n\nErstelle analog einen Typen \u0060Auto\u0060, der auch vom Typ \u0060Fahrzeug\u0060 erben soll. Dieser Typ soll aber zus\u00E4tzlich das Feld \u0060AnzahlTueren\u0060 enthalten. \nW\u00E4hle hierzu einen passenden primitiven Typen und passe auch den Konstruktor an, sodass diese Anzahl der T\u00FCren auch beim Instanziieren gesetzt werden kann.\n*)\n(******)\n\ntype Motorrad (hersteller:string) =\n\n    inherit Fahrzeug(hersteller)\n\n    new() = Motorrad(\u0022Kawasaki\u0022)\n\n(**\n### Subtask 2.2.2\n\nErstelle eine Funktion, welche einen Parameter des Typs \u0060Fahrzeug\u0060 enth\u00E4lt und die Methode \u0060Fahren\u0060 dieses Fahrzeuges ausf\u00FChrt.\n*)\n(******)\n\n(**\n### Subtask 2.2.3\n\nErstelle ein \u0060Auto\u0060 und binde en an einen Namen. Dann wende die oben definierte Funktion zum \u0060Fahren\u0060 darauf an.\n*)\n\n(**\n### Task 2.3 (Bonusaufgabe) Ver\u00E4nderliche Werte in Objekten\n\nDeklariere eine Klasse \u0060Cabrio\u0060 die vom Typ \u0060Fahrzeug\u0060 erbt. \n\nDiese Klasse soll ein Feld \u0060DachOffen\u0060 vom Typ \u0060bool\u0060 haben und zus\u00E4tzlich Methoden, mit denen man das Dach \u00F6ffnen und schlie\u00DFen kann\n*)\n\n\n\n(**\n## Polymorphismus\n\n### Task 3.1\n\nWir wollen hier Personen implementieren, die ihren Namen sagen k\u00F6nnen. In Japan wird auch im allt\u00E4glichen Leben normalerweise der Familienname vor dem Eigennamen genannt. \nSo ist Yoko Ono in Japan als Ono Yoko bekannt. Um diesen Unterschied programmatisch darzustellen, wurde der Code folgendermassen geschrieben:\n\nOrdne die folgenden Begriffen den zugeh\u00F6rigen Codebausteinen zu: \u0060Klassendeklaration\u0060, \u0060Objektinstanziierung\u0060, \u0060Interfacedeklaration\u0060\n\n*)\n(******)\n\n// Bezeichnung:\ntype IPerson =\n    abstract FamilienName   : string\n    abstract EigenName      : string\n    abstract NamenSagen     : unit -\u003E string\n\n// Bezeichnung:\ntype Japaner (fn, en) =\n    let familienName = fn\n    let eigenName = en\n    interface IPerson with\n        member self.FamilienName = familienName\n        member self.EigenName = eigenName\n        member self.NamenSagen () = familienName \u002B \u0022 \u0022 \u002B eigenName\n\n// Bezeichnung:\ntype Deutscher (fn, en) =\n    let familienName = fn\n    let eigenName = en\n    interface IPerson with\n        member self.FamilienName = familienName\n        member self.EigenName = eigenName\n        member self.NamenSagen () = eigenName \u002B \u0022 \u0022 \u002B familienName\n\n// Bezeichnung:\nlet yokoOno = Japaner(\u0022Ono\u0022,\u0022Yoko\u0022)\n\n// Bezeichnung:\nlet angeloMerte = Deutscher(\u0022Merte\u0022,\u0022Angelo\u0022)\n\n(**\n### Task 3.2\n\nGreife auf die Methode \u0060NamenSagen\u0060 der beiden Personen zu. \nTipp: Verwende den korrekten \u0060casting Operator\u0060\n*)\n(******)\n\n(**\n### Task 3.3\n\nErkl\u00E4re kurz in eigenen Worten, warum in diesem Beispiel Polymorphismus verwendet wurde und nicht Vererbung.\n*)\n(******)\n\n(**\n### Task 3.4\n\nIm fernen Land Dingeldongel wird wie auch in Deutschland erst der Eigenname und dann der Familienname genannt. Beide werden jedoch revertiert. (Angela Merkel -\u003E alegnA lekreM)\n\nDeklariere die Klasse \u0060Dingeldongler\u0060, die das Interface \u0060IPerson\u0060 implementiert.\n\nTipp: Verwende die gegebene string-revertier Funktion\n\n*)\n(******)\n\nlet revert (s:string) = System.String(s.ToCharArray() |\u003E Array.rev)\n"},{"uri":"/BIO-BTE-12-V-4/tasks/german/installationsanweisungen.html","title":"Erste Schritte","content":"(**\n---\ntitle: Erste Schritte\ncategory: \u00DCbungen(deutsch)\ncategoryindex: 2\nindex: 1\n---\n\n# Erste Schritte\n\n## Installationsanweisung\n\n* Lade die neuste stabile Version von [Visual Studio Code](https://code.visualstudio.com/) herunter und installiere sie.\n* Lade die empfohlene [.NET SDK](https://dotnet.microsoft.com/download/dotnet/5.0) f\u00FCr dein Betriebssystem herunter und installiere sie.\n\n    ![]({{root}}img/DotnetSDK.png)\n\n* \u00D6ffne Visual Studio Code, navigiere zum Reiter \u0022Extensions\u0022 und installiere:\n    * .NET Interactive Notebooks\n    * Ionide-fsharp\n    \n    ![]({{root}}img/CodeExtensions.png)\n\n\n## Bearbeiten der \u00DCbungen\n\nEs gibt drei verschiedene M\u00F6glichkeiten zum bearbeiten der \u00DCbungen:\n\n* Lokal als Notizbuch in Visual Studio Code\n* Lokal als fsx in Visual Studio Code\n* Online als Notizbuch auf Binder\n\n### Lokal als Notizbuch in Visual Studio Code\n\n* Lade das aktuelle Notizbuch von der links verlinkten Seite herunter.\n\n    ![]({{root}}img/DownloadNotebook.png)\n\n* Dr\u00FCcke \u0060Strg \u002B Shift \u002B P\u0060 oder \u0060F1\u0060 in Visual Studio Code und klicke auf \u0060.NET Interactive Open notebook\u0060.\n\n    ![]({{root}}img/OpenNotebook.png)\n\n* Navigiere zum Speicherort deines Notizbuchs und \u00F6ffne es.\n* Notizb\u00FCcher beinhalten Text- und Codebl\u00F6cke:\n    * Einen neuer Text- oder Codeblock kann hinzugef\u00FCgt werden, indem man mit dem Mauszeiger \u00FCber den oberen oder unteren Rand eines vorhandenen Blocks f\u00E4hrt:\n\n    ![]({{root}}img/AddingBlock.png)\n\n    * Arbeiten mit Textbl\u00F6cken:\n        Ein Textblock kann \u00FCber einen Doppelklick bearbeitet werden. Innerhalb eines Textblocks kannst du normalen Text schreiben, oder den Text mit [Markdown](https://en.wikipedia.org/wiki/Markdown) anpassen.\n        Sobald du fertig bist, kannst du die \u0060Esc\u0060 Taste benutzen.\n    * Arbeiten mit Codebl\u00F6cken:\n        Ein Codeblock kann \u00FCber einen Klick in dne Block bearbeitet werden. In diesem Block kannst du deinen eigenen Code schreiben, oder bereits existierenden Code bearbeiten. Sobald du mit dem bearbeiten fertig bist, kannst du \u0060Strg \u002B Alt \u002B Enter\u0060 dr\u00FCcken, um den Codeblock auszuf\u00FChren.\n        Solltest du alle Codebl\u00F6cke auf einmal ausf\u00FChren wollen, kannst du auf die beiden Pfeile in der oberen rechten Ecke des Notizbuches klicken:\n\n    ![]({{root}}img/ExecuteAll.png)\n\n### Lokal als fsx in Visual Studio Code\n\n* Lade die aktuelle fsx von der links verlinkten Seite herunter.\n\n    ![]({{root}}img/DownloadScript.png)\n\n* Dr\u00FCcke \u0060Strg \u002B O\u0060 in Visual Studio Code, navigiere zum Speicherort deiner fsx und \u00F6ffne sie.\n* Du kannst, \u00E4hnlich wie bei einem Textfile, Code \u00FCberall in der fsx schreiben. \u00DCber \u0060Alt \u002B Enter\u0060 kann der geschriebene Code ausgef\u00FChrt werden\n    * Das dr\u00FCcken von \u0060Alt \u002B Enter\u0060 in einer Zeile f\u00FChrt die aktuelle Zeile aus\n    * Wenn man einen Abschnitt markiert und dann \u0060Alt \u002B Enter\u0060 dr\u00FCckt, wird der markierte Abschnitt ausgef\u00FChrt\n* Du kannst deinen Code kommentieren, indem du \u0022//\u0022 vor deinen Kommentar setzt (z.B..: // Mein Kommentar)\n\n### Online als Notizbuch auf Binder\n\n* \u00D6ffne das aktuelle Notizbuch auf der links verlinkten Seite.\n\n    ![]({{root}}img/RunBinder.png)\n\n* Notizb\u00FCcher beinhalten Text- und Codebl\u00F6cke:\n    * Man kann einen neuen Text- oder Codeblock \u00FCber das klicken von \u0060Insert\u0060 am oberen Ende der Seite und dem Ausw\u00E4hlen der Eigenschaften \u0060Code\u0060 oder \u0060Markdown\u0060 erstellen:\n\n    ![]({{root}}img/BinderAddingBlock.png)\n\n    * Arbeiten mit Textbl\u00F6cken:\n        Ein Textblock kann \u00FCber einen Doppelklick bearbeitet werden. Innerhalb eines Textblocks kannst du normalen Text schreiben, oder den Text mit [Markdown](https://en.wikipedia.org/wiki/Markdown) anpassen.\n        Sobald du fertig bist, kannst du \u0060Strg \u002B Enter\u0060 dr\u00FCcken.\n    * Arbeiten mit Codebl\u00F6cken:\n        Ein Codeblock kann \u00FCber einen Klick in den Block bearbeitet werden. In diesem Block kannst du deinen eigenen Code schreiben, oder bereits existierenden Code bearbeiten. Sobald du mit dem bearbeiten fertig bist, kannst du \u0060Strg \u002B Enter\u0060 dr\u00FCcken, um den Codeblock auszuf\u00FChren.\n        Solltest du alle Codebl\u00F6cke auf einmal ausf\u00FChren wollen, kannst du auf die beiden Pfeile am oberen Ende des Notizbuches klicken:\n\n    ![]({{root}}img/BinderExecuteAll.png)\n*)"},{"uri":"/BIO-BTE-12-V-4/tasks/german/wpb-task-02.html","title":"\u00DCbung 02","content":"(**\n---\ntitle: \u00DCbung 02\ncategory: \u00DCbungen(deutsch)\ncategoryindex: 2\nindex: 3\n---\n*)\n\n(**\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/csbiology/BIO-BTE-12-V-4/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Task02 - Functions and Data types\n\n## Tuples\n\n### Task 1.1:\n\nDeklariere einen Tuple aus 2. und \u0022Februar\u0022 und binde den Tuple an den Namen \u0060tuple1\u0060.\n*)\n\n(******)\n\n(**\n### Task 1.2:\n\nDeklariere einen Tuple aus 2., \u0022Februar\u0022 und \u0022Fruehling\u0022 und bindet ihn an den Namen \u0060tuple2\u0060.\n*)\n\n(******)\n\n(**\n### Task 1.3:\n\nGreife auf den zweiten Wert des Tuples aus 1.1 zu.\n*)\n\n(******)\n\n(**\n### Task 1.4:\n\nBindet \u0060tuple1\u0060 aus Task 1.1 an: \u0060(output1,output2)\u0060\nWarum kann das sinnvoll sein?\nStichwort: Tuple Deconstruction.\n*)\n\n(******)\n\n(**\n## Record Types\n\n### Task 2.1: \n\nDefiniere einen Record Type mit dem Namen \u0060Person\u0060. Person soll die Felder \u0060Name\u0060(string) und \u0060Alter\u0060(int) haben.\nBei Record Types wird kein camel case, sondern pascal case verwendet (wie camel case nur ist der erste Buchstabe auch gro\u00DF).\n*)\n\n(******)\n\n(**\n### Task 2.2:\n\nErstellt einen Wert des Typs \u0060Person\u0060 mit ausgedachten Feldwerten und bindet ihn an den Namen \u0060meinePerson1\u0060.\nGreift auf das Feld \u0060Alter\u0060 von \u0060meinePerson1\u0060 zu.\n*)\n\n(******)\n\n(**\n### Task 2.3:\n\nDeklariere eine Funktion die zwei Inputparameter erhaelt und als Rueckgabewert eine \u0060Person\u0060 gibt.\nBinde ein Ergebnis dieser Funktion an den Namen \u0060meinePerson2\u0060.\n*)\n\n(******)\n\n(**\n### Task 2.4:\n\nDefiniere einen weiteren Record Type mit dem Namen \u0060ErweitertePerson\u0060. ErweitertePerson soll die gleichen Felder wie \u0060Person\u0060\nhaben, bekommt aber noch das zusaetzliche Feld \u0060Hobby\u0060. Da man alles zu seinem Hobby machen kann, soll\n\u0027Hobby\u0027 vom Typ generic type sein.\nTipp: Zwischen dem Namen des Record types und \u0060=\u0060 muss der generic type durch \u0060\u003C\u0027a\u003E\u0060 angegeben werden\n*)\n\n(******)\n\n(**\n### Task 2.5\n\nErstellt einen Wert des Typs \u0060ErweitertePerson\u0060.\n*)\n\n(******)\n\n(**\n## Signatures\n\n### Task 3.1\n\nDeklariere eine beliebige Funktion mit der Signatur \u0060int -\u003E int\u0060.\n*)\n\n(******)\n\n(**\n### Task 3.2\n\nDeklariere eine beliebige Funktion mit der Signatur \u0060int -\u003E (int -\u003E int) -\u003E float\u0060.\n*)\n\n(******)\n\n(**\n### Task 3.3\n\nBeschreibe den Rueckgabewert einer Funktion mit folgender Signatur \u0060char -\u003E (string -\u003E char -\u003E float)\u0060.\n*)\n\n(******)\n\n(**\n## Collection types\n\n### Task 4.1\n\nErstelle eine int Liste mit den Zahlen 1 bis 100 und binde sie an einen Namen.\n*)\n\n(******)\n\n(**\n### Task 4.2\n\nBinde das erste und das letzte Element der Liste an je einen Namen.\n*)\n\n(******)\n\n(**\n### Task 4.3\n\nErstelle ein float Array mit den Zahlen von 1. bis 100. und binde es an einen Namen.\n*)\n\n(******)\n\n(**\n### Task 4.4\n\nBinde das 15. Element des Arrays aus 4.3 an einen Namen.\n*)\n\n(******)\n\n(**\n### Task 4.5\n\nErstelle eine Map, die alle Monate enthaelt. Verwende dafuer die Zahl des Monats (integer) als Key und den Namen (string) als Value.\n*)\n\n(******)\n\n(**\n### Task 4.6\n\nUeberpruefe anhand eines geeigneten Keys, ob der Monat Maerz in der Map vorhanden ist.\n*)\n\n(******)\n\n(**\n### Task 4.7\n\nErstelle zwei Sets. Eins mit Zahlen von 1 bis 10 und eins mit Zahlen von 3 bis 7 und binde sie an je einen Namen.\n*)\n\n(******)\n\n(**\n### Task 4.8 \n\nVergleicht die zuvor erstellten Sets. Bildet die Schnittmenge (intersect) und die Vereinigungsmenge (union) aus beiden Sets und bindet sie an je einen Namen.\nTipp: Nutzt das Set Modul um durch \u0027reindotten\u0027 geeignete Funktionen zu erhalten.\n*)\n\n(******)"},{"uri":"/BIO-BTE-12-V-4/tasks/german/wpb-task-03.html","title":"\u00DCbung 03","content":"(**\n---\ntitle: \u00DCbung 03\ncategory: \u00DCbungen(deutsch)\ncategoryindex: 2\nindex: 4\n---\n*)\n\n(**\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/csbiology/BIO-BTE-12-V-4/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Task03 - Control Flow\n\n\n## If-then-else\n\n### Task 1.1:\n\nDeklariere eine Funktion, die einen Parameter \u0060x\u0060 vom Typ float erhaelt. Ist der Wert von \u0060x\u0060 groesser Null, so soll die Funktion den Wert zurueckgeben, falls nicht soll das \nVorzeichen umgekehrt und denn der Wert zerueckgegeben werden.  \nTipp: Multiplikation\n\n*)\n\n(******)\n\n(**\n\n### Task 1.2:\n\nDeklariere eine Funktion, die drei Zahlen als Parameter bekommt. Die groesste der drei Zahlen soll als Ergebnis ausgegeben werden.  \nTipp: \u0060elif\u0060!\n\n*)\n\n(******)\n\n(**\n\n### Task 1.3:\n\nDeklariere eine Funktion, die eine Jahreszahl als Parameter bekommt. Wenn es sich um ein Schaltjahr handelt, soll das Ergebnis \u0060true\u0060 sein, andernfalls \u0060false\u0060.  \nTipps:  \n- Ist die Jahreszahl durch vier teilbar, aber nicht durch 100, ist es ein Schaltjahr. 2008 faellt unter diese Regel.  \n- Ist die Jahreszahl durch 100 teilbar, aber nicht durch 400, ist es kein Schaltjahr. 2100 wird kein Schaltjahr sein.  \n- Ist die Jahreszahl durch 400 teilbar, dann ist es immer ein Schaltjahr. Deshalb war das Jahr 2000 ein Schaltjahr.\n\n*)\n\n(******)\n\n(**\n\n## Pattern matching\n\n### Task 2.1:\n\nDeklariere eine Funktion mit denselben Eigenschaften wie in Task 1.1 beschrieben. Verzichte auf if-then-else Expressions und verwende Pattern Matching.  \nTipp: Guarding Rules \u002B Wildcard\n\n*)\n\n(******)\n\n(**\n\n### Task 2.2:\n\nGegeben ist die UnionCase Definition \u0060Monat\u0060:\n\u0060\u0060\u0060fsharp\ntype Monat =\n    | Januar\n    | Februar\n    | Maerz\n    | April\n    | Mai\n    | Juni\n    | Juli\n    | August\n    | September\n    | Oktober\n    | November\n    | Dezember\n\u0060\u0060\u0060\n\nund die UnionCase Definition \u0060Jahreszeit\u0060:\n\u0060\u0060\u0060fsharp\ntype Jahreszeit =\n    | Fruehling\n    | Sommer\n    | Herbst\n    | Winter\n\u0060\u0060\u0060\n\nDeklariere eine Funktion, die einen Parameter \u0060m\u0060 vom Typ \u0060Monat\u0060 besitzt. Verwende Pattern Matching, um jeden\nMonat einer Jahreszeit zuzuordnen.\n\n*)\n\n(******)\n\n(**\n\n### Task 2.3:\n\nPattern matching ist sehr gut dazu geeignet Datenstrukturen zu zerlegen (eng. deconstruction). Deklariere eine\nFunktion, die den Record type \u0060Person\u0060 (bekannt aus Uebung 2) erhaelt und \u0060true\u0060 zurueckgibt, falls der Nachname \u0060Mueller\u0060 lautet.  \nTipp: https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/records#pattern-matching-with-records\n\n*)\n\n(******)\n\n(**\n\n## Schleifen\n\n### Task 3.1:\n\nDeklariere eine Funktion, die einen Parameter \u0060n\u0060 vom Typ \u0060int\u0060 erhaelt.  \nDie Funktion soll alle ganzen Zahlen von 1 bis n in der Konsole ausgeben (Tipp: \u0060printfn\u0060). Benutze dafuer eine \u0060for\u0060-Loop.\n\n*)\n\n(******)\n\n(**\n\n### Task 3.2:\n\nDeklariere eine Funktion, die einen Parameter \u0060n\u0060 vom Typ \u0060int\u0060 erhaelt.  \nDie Funktion soll alle ganzen Zahlen von 1 bis n in einer Liste speichern.  \nTipps: Sequence Expressions, Comprehensions  \nExtra Punkt: schreibe nur alle geraden Zahlen in eine Liste, Tipps: if-then-else, modulo.\n\n*)\n\n(******)\n\n(**\n\n### Task 3.3:\n\nDeklariere eine Funktion, die einen Parameter \u0060n\u0060 vom Typ \u0060int\u0060 und einen Parameter \u0060f\u0060 mit der Signatur \u0060(int -\u003E int)\u0060 erhaelt.  \nDie Funktion soll \u0060f\u0060 auf alle ganzen Zahlen von 1 bis n anwenden und in einer in einer Liste speichern.  \nTipps: Sequence Expressions, Comprehensions\n\n*)\n\n(******)\n\n(**\n\n## Rekursion\n\n### Task 4.1:\n\nModifiziere folgende Funktion (bekannt aus der Vorlesung) so, dass sie am Ende ausgibt wie viele Stufen bewaeltigt wurden.\n\u0060\u0060\u0060fsharp\nlet rec stufeSteigen nStufen position =\n    if position = nStufen \u002B 1 then\n        printfn \u0022Puh, geschafft\u0022\n    else\n        printfn \u0022Ich sollte mehr Sport machen\u0022\n        stufeSteigen nStufen (position \u002B 1)\n\u0060\u0060\u0060\n\n*)\n\n(******)\n\n(**\n\n### Task 4.2:\n\nModifiziere die folgende Funktion (bekannt aus der Vorlesung) so, dass sie -1 zurueckgibt, falls abzusehen ist, dass das Ergebnis groesser als 1000 wird.  \nTipp: Hier hilft die \u0060print\u0060-Funktion um Zwischenergebnisse zu visualisieren und die Funktion besser zu verstehen. Z. B.: \u0060printfn \u0022n:%i, acc\u0027:%i\u0022 n acc\u0060.\n\u0060\u0060\u0060fsharp\nlet rec facultaet acc n  =\n    if n = 1 then\n        acc \n    else\n        let acc\u0027 = n * acc\n        facultaet acc\u0027 (n-1)\n\nfacultaet 1 4\n\u0060\u0060\u0060\n\n*)\n\n(******)"},{"uri":"/BIO-BTE-12-V-4/tasks/german/wpb-task-01.html","title":"\u00DCbung 01","content":"(**\n---\ntitle: \u00DCbung 01\ncategory: \u00DCbungen(deutsch)\ncategoryindex: 2\nindex: 2\n---\n*)\n\n(**\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/csbiology/BIO-BTE-12-V-4/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Task01 - Hello F#\n\n-------------------------------\n\n\nErst einmal die absoluten Basics:\n\n- **In einem .fsx script:** \n\n    Markiert die \u002710\u0027, und drueckt Alt\u002BEnter, dann sollte sich die interaktive Konsole oeffnen und euer \n    Output sollte \u0027val it: int = 10\u0027 sein.\n    (Bei einzeiligem Code koennt ihr auch einfach die Zeile auswaehlen und Alt\u002BEnter druecken ohne das alles markiert ist.)\n\n- **In einem Notebook:**\n\n    Links von dem Feld unten das die \u002710\u0027 beinhaltet befindet sich ein \u0027play\u0027 Knopf. \n    Dieser Knopf f\u00FChrt beim dr\u00FCcken den jeweiligen Code-block aus und gibt das Ergebnis (hier: 10) darunter aus.\n\n    **Codebl\u00F6cke in notebooks m\u00FCssen immer mit dem Wert enden, der ausgegben werden soll.**\n\n*)\n\n10\n\n(**\nAuf diese Weise koennt ihr Code den ihr geschrieben habt, direkt testen und euch den Output ansehen.\nVersucht das mal mit der folgenden Zeile und ihr werdet sehen, dass das Ergebnis direkt ausgerechnet wird und 30 ist.\n*)\n\n10 \u002B 20\n\n(**\nAlles was ihr hinter \u0060//\u0060 oder innerhalb von \u0060(* ... *)\u0060 schreibt ist ein Kommentar und wird nicht als Code ausgefuehrt.\nIhr koennt auch Teile einer Zeile mit \u0060(* ... *)\u0060 auskommentieren. \n\nDie Standardtastenkombination zum auskommentieren ist (Strg \u002B K -\u003E Strg \u002B C)\n*)\n\n10 (*\u002B 40 *) \u002B 30\n\n(**\nSolltet ihr bei einer Uebung nicht auf die Loesung kommen, lasst auf jeden Fall euren Loesungsansatz stehen!\n\n## Das \u0027let\u0027-Binding\n\n## Task 1\n\n### Task 1.1\n\nBinde den Wert 10 an den Namen \u0027x\u0027. Binde den Wert 20 an den Namen \u0027kaesebrot\u0027.\n*)\n\n(******)\n\n(**\n### Task 1.2\n\nBinde das Ergebnis der Addition von \u0027x\u0027 mit dem Wert 10 an \u0027y\u0027.\n*)\n\n(******)\n\n(**\n### Task 1.3\n\nBinde einen Vornamen als string an \u0027vorname\u0027.\n*)\n\n(******)\n\n(**\n### Task 1.4\n\nBerechne den Rest aus 432858049/41 und binde das Ergebnis an \u0027modulo\u0027\n*)\n\n(******)\n\n(**\n### Task 1.5\n\nBinde die Summe der jeweiligen Summen aus x \u002B 10 und y \u002B 20 an den Namen \u0027summeXY\u0027. \nDie Zwischenergebnisse sollten nicht im globalen Sichtbarkeitsbereich (Scope) liegen.\n*)\n\n(******)\n\n(**\n## Die \u0022printfn\u0022 - Funktion\n\n### Task 2\n\n_Tipp: https://docs.microsoft.com/de-de/dotnet/fsharp/language-reference/plaintext-formatting_\n\n### Task 2.1:  \n\nBenutze die printfn - Funktion um \u0022Hallo F#\u0022 in die Konsole auszugeben.\n*)\n\n(******)\n\n(**\n### Task 2.2:  \n\nBenutze die printfn - Funktion um den Wert von \u0027vorname\u0027 in die Konsole auszugeben.\n*)\n\n(******)\n\n(**\n### Task 2.3:  \n\nBenutzt printfn um \u0027y\u0027 in die Konsole auszugeben.\n*)\n\n(******)\n\n(**\n## Primitive Datentypen und Funktionen\n\n### Task 3\n\n### Task 3.1\n\nBinde einen beliebigen Wert vom Typ Integer an den Namen intI.\n*)\n\n(******)\n\n(**\n### Task 3.2\n\nBinde einen beliebigen Wert vom Typ Float an den Namen floatI.\n*)\n\n(******)\n\n(**\n### Task 3.3\n\nWandelt entweder intI oder floatI in den Datentyp des anderen um und addiert beide.\n*)\n\n(******)\n\n(**\n### Task 3.4\n\nBerechne den Quotienten aus \u002727\u0027 und \u002713\u0027. Dann berechne den Quotienten von beiden Integern als Float.\n*)\n\n(******)\n\n(**\n### Task 3.5:\n\nKonkateniere einen beliebigen Wert vom Typ String mit einem einzelnem Buchstaben (Typ Char)\n*)\n\n(******)\n\n(**\n### Task 3.6:\n\nDeklariere eine Funktion \u0027mulitplyBy2\u0027 die einen float verdoppelt. \n*)\n\n(******)\n\n(**\n### Task 3.7:  \n\nDeklariere eine Funktion \u0027calculateCylinderVolume\u0027 die aus Radius und Laenge das Volumen eines Zylinders \nzurueckgibt UND zusaetzlich \u0022Das Volumen des Zylinders ist: XX\u0022 in die Konsole printed. Wobei XX natuerlich \ndas korrekte Volumen des Zylinders ist. (Der Output einer printfn Funktion ist Unit.)\nWarum kann es Sinn machen, Ergebnisse zu printen? \n*)\n\n(******)\n\n(**\n### Task 3.8:  \n\nDeklariere eine Funktion die einen Parameter vom Typ Integer als Input nimmt und die \u0027multiplyBy2\u0027 \nFuntkion darauf anwendet\n*)\n\n(******)\n\n(**\n### Task 3.9:  \n\nDeklariere eine Funktion die als Input zwei Parameter vom Typ Floats, einen Vergleichsoperator z.B. \n(\u003C, \u003E, = ), und einen Parameter vom Typ Boolean akzeptiert. Das Ergebnis aus der Anwendung des angegebenen \nOperators auf die numerischen Parameter soll mit dem Parameter vom Typ Boolean auf Gleichheit ueberprueft werden.\n\n(_2 Punkte_)\n\n*)\n\n(******)"},{"uri":"/BIO-BTE-12-V-4/lectures/data-visualization.html","title":"WPB VII - Data visualization","content":"---\ntitle: WPB VII - Data visualization\ncategory: Lecture material\ncategoryindex: 1\nindex: 7\n---\n\n# WPB VII - Data visualization\n\nData visualization: An introduction to concepts and techniques for data visualization using Plotly\n\n- WPB VII.01 : Einf\u00FChrung in die Datenvisualisierung / Introduction to data visualization\n- WPB VII.02 : Plotly.NET\n- WPB VII.03 : Grundlegende Charts mit Plotly.NET / Basic charts using Plotly.NET\n\n\n## Updates zu den Vorlesungsvideos\n\nDie Visualisierungsbibliothek, die im Rahmen dieser Vorlesung (und aller folgenden) benutzt wird, hie\u00DF fr\u00FCher FSharp.Plotly. Der Name hat sich mittlerweile ge\u00E4ndert zu **Plotly.NET**. \n\nPlotly.NET (fr\u00FCher FSharp.Plotly) ist eine F# Implementation der sehr popul\u00E4ren plotly.js Bibliothek. Sie wird haupts\u00E4chlich von unserer Arbeitsgruppe entwickelt und gepflegt, ist aber mittlerweile offiziell Teil von Plotly \u2013 daher der Nameswechsel.\n\nDie grundlegende Funktionalit\u00E4t hat sich dadurch allerdings nciht ge\u00E4ndert. Obwohl viele convenience features und neue Charts im letzten hinzugekommen sind, funktionieren alle Codebeispiele aus den Vorlesungsvideos nach wie vor, der einzige unterschied ist der Name der Bibliothek. Au\u00DFerdem ist die Dokumentation (zu finden unter https://plotly.net) deutlich besser. \n\n## Updates regarding the lecture videos\n\nThe visualization library used in this and all following lectures was recently renamed from FSharp.Plotly to **Plotly.NET**.\n\nPlotly.NET (formerly FSharp.Plotly) is a F# implementation of the popular plotly.js library. While it is mostly maintained and developed by us, it is also now official part of the plotly organization - hence the name change.\n\nHowever, this does not change the basic functionality. While many features have been added in the recent year, all code examples from the videos work just fine, the only difference is the name of the library. The documentation (https://plotly.net) is also much better.\n\n## Lecture videos (click to expand and watch)\n\n- \u003Ca href=\u0022#vimeo-1\u0022 data-action=\u0022collapse\u0022\u003EWPB VII.01\u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-1\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/425266880\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\n- \u003Ca href=\u0022#vimeo-2\u0022 data-action=\u0022collapse\u0022\u003EWPB VII.01\u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-2\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/425452532\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\n- \u003Ca href=\u0022#vimeo-3\u0022 data-action=\u0022collapse\u0022\u003EWPB VII.01\u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-3\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/425841584\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\n## Slides\n\n- WPB VII.01 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/VII01_Einfuehrung_in_die_Datenvisualisierung.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/VII01_Introduction_to_data_visualization.pdf))\n- WPB VII.02 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/VII02_Plotly.NET.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/VII02_Plotly.NET.pdf))\n- WPB VII.03 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/VII03_Grundlegende_Charts_mit_Plotly.NET.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/VII03_Basic_charts_using _Plotly.NET.pdf))\n\n"},{"uri":"/BIO-BTE-12-V-4/lectures/control-flow.html","title":"WPB III - Control flow","content":"---\ntitle: WPB III - Control flow\ncategory: Lecture material\ncategoryindex: 1\nindex: 3\n---\n\n# WPB II - Functions and data types\n\nAn introduction on how to to control the program flow:\n\n- WPB III.01 : Ausdr\u00FCcke und Statements / Expressions and statements\n- WPB III.02 : Kontrollfluss: Bedingte Anweisung und Verzweigung / Control flow: Conditional and branching\n- WPB III.03 : Kontrollfluss: Schleifen / Control flow: Loops\n- WPB III.04 : Rekursion / Recursion\n \n\n## Lecture videos (click to expand and watch)\n\n- \u003Ca href=\u0022#vimeo-1\u0022 data-action=\u0022collapse\u0022\u003EWPB III.01 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-1\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/414529767\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-2\u0022 data-action=\u0022collapse\u0022\u003EWPB III.02 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-2\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/414893455\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-3\u0022 data-action=\u0022collapse\u0022\u003EWPB III.03 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-3\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/415065232\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-4\u0022 data-action=\u0022collapse\u0022\u003EWPB III.04 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-4\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/415276162\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\n## Slides\n\n- WPB III.01 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/III01_Ausdruecke_und_Statements.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/III01_Expressions_and_Statements.pdf))\n- WPB III.02 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/III02_Kontrollfluss_Verzweigung.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/III02_Control_flow_Conditional.pdf))\n- WPB III.03 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/III03_Kontrollfluss_Schleifen.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/III03_Control_flow_loops.pdf))\n- WPB III.04 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/III04_Rekursion.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/III04_Recursion.pdf))"},{"uri":"/BIO-BTE-12-V-4/lectures/hello-fsharp.html","title":"WPB I - Hello F#","content":"---\ntitle: WPB I - Hello F#\ncategory: Lecture material\ncategoryindex: 1\nindex: 1\n---\n\n# WPB I - Hello F#\n\nAn introduction to scientific programming using the F# programming language:\n\n- WPB I.01 : Einf\u00FChrung und Motivation / Introduction and motivation\n- WPB I.02 : Funktionen und Wertebindung / Functions and value bindings\n- WPB I.03 : Sichtbarkeitsbereich / Scope\n- WPB I.04 : Primitive Datentypen / Primitive data types\n \n\n## Lecture videos (click to expand and watch)\n\n- \u003Ca href=\u0022#vimeo-1\u0022 data-action=\u0022collapse\u0022\u003EWPB I.01 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-1\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/407241742\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-2\u0022 data-action=\u0022collapse\u0022\u003EWPB I.02 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-2\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/407247350\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-3\u0022 data-action=\u0022collapse\u0022\u003EWPB I.03 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-3\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/407545667\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-4\u0022 data-action=\u0022collapse\u0022\u003EWPB I.04 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-4\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/407723990\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\n## Slides\n\n- WPB I.01 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/I01_Einf%C3%BChrung_und_Motivation.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/I01_Introduction_and_motivation.pdf))\n- WPB I.02 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/I02_Funktionen_und_Wertebindung.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/I02_Functions_and_value_bindings.pdf))\n- WPB I.03 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/I03_Scope.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/I03_Scope.pdf))\n-  WPB I.04 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/I04_Primitive_Datentypen.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/I04_Primitive_data_types.pdf))\n"},{"uri":"/BIO-BTE-12-V-4/lectures/functions-and-data-types.html","title":"WPB II - Functions and data types","content":"---\ntitle: WPB II - Functions and data types\ncategory: Lecture material\ncategoryindex: 1\nindex: 2\n---\n\n# WPB II - Functions and data types\n\nAn introduction to functional and more complex data types and structures:\n\n- WPB II.01 : Funktionale Datentypen / Functional data types\n- WPB II.02 : Funktionssignaturen / Function signatures\n- WPB II.03 : Collections (Sammlungstypen) / Collections\n \n\n## Lecture videos (click to expand and watch)\n\n- \u003Ca href=\u0022#vimeo-1\u0022 data-action=\u0022collapse\u0022\u003EWPB II.01 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-1\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/409469949\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-2\u0022 data-action=\u0022collapse\u0022\u003EWPB II.02 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-2\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/409482460\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-3\u0022 data-action=\u0022collapse\u0022\u003EWPB II.03 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-3\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/412603072\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\n## Slides\n\n- WPB II.01 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/II01_Funktionale_Datentypen.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/II01_Functional_data_types.pdf))\n- WPB II.02 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/II02_Funktionssignaturen.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/II02_Function_signatures.pdf))\n- WPB II.03 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/II03_Collection_types_(Sammlungstypen).pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/II03_Collection_types.pdf))\n"},{"uri":"/BIO-BTE-12-V-4/lectures/designing-with-types.html","title":"WPB VI - Designing with types","content":"---\ntitle: WPB VI - Designing with types\ncategory: Lecture material\ncategoryindex: 1\nindex: 6\n---\n\n# WPB VI - Designing with types\n\nLearn to solve problems by designing an enterprise-grade Tic-Tac-Toe.\n\n- WPB VI.01 : Designing Tic-Tac-Toe\n \n## Lecture videos (click to expand and watch)\n\n- \u003Ca href=\u0022#vimeo-1\u0022 data-action=\u0022collapse\u0022\u003EWPB VI.01\u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-1\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/423740478\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\n## Slides\n\n- WPB VI.01 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/VI01_Typen-gesteuertes_Design.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/VI01_Designing_with_types.pdf))\n\n\n\n"},{"uri":"/BIO-BTE-12-V-4/lectures/programming-with-functions.html","title":"WPB IV - Programming with functions","content":"---\ntitle: WPB IV - Programming with functions\ncategory: Lecture material\ncategoryindex: 1\nindex: 4\n---\n\n# WPB IV - Programming with functions\n\nTowards a deeper understanding of functional programming:\n\n- WPB IV.01 : Currying und Closures / Currying and closures\n- WPB IV.02 : Funktionen h\u00F6herer Ordnung / Higher order functions\n- WPB IV.03 : Programmieren mit Funktionen / Programming with functions\n \n## Lecture videos (click to expand and watch)\n\n- \u003Ca href=\u0022#vimeo-1\u0022 data-action=\u0022collapse\u0022\u003EWPB IV.01 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-1\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/417322489\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-2\u0022 data-action=\u0022collapse\u0022\u003EWPB IV.02 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-2\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/417522824\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-3\u0022 data-action=\u0022collapse\u0022\u003EWPB IV.03 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-3\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/417737643\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\n## Slides\n\n- WPB IV.01 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/IV01_Currying_und_Closures.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/IV01_Currying_and_Closures.pdf))\n- WPB IV.02 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/IV02_Funktionen_hoeherer_Ordnung.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/IV02_Higher_order_functions.pdf))\n- WPB IV.03 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/IV03_Programmieren_mit_Funktionen.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/IV03_Programming_with_functions.pdf))\n\n\n"},{"uri":"/BIO-BTE-12-V-4/lectures/programming-with-objects.html","title":"WPB V - Programming with objects","content":"---\ntitle: WPB V - Programming with objects\ncategory: Lecture material\ncategoryindex: 1\nindex: 5\n---\n\n# WPB V - Programming with objects\n\nAn introduction to programming with objects in FSharp\n\n- WPB V.01 : Ver\u00E4nderliche Werte / Mutable values\n- WPB V.02 : Vererbung / Inheritance\n- WPB V.03 : Polymorphismus / Polymorphism\n \n## Lecture videos (click to expand and watch)\n\n- \u003Ca href=\u0022#vimeo-1\u0022 data-action=\u0022collapse\u0022\u003EWPB V.01 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-1\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/420275523\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-2\u0022 data-action=\u0022collapse\u0022\u003EWPB V.02 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-2\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/420419644\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-3\u0022 data-action=\u0022collapse\u0022\u003EWPB V.03 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-3\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/420639045\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\n## Slides\n\n- WPB V.01 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/V01_Veraenderliche_Werte.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/V01_Mutable_Values.pdf))\n- WPB V.02 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/V02_Vererbung.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/V02_Inheritance.pdf))\n- WPB V.03 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/V03_Polymorphismus.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/V03_Polymorphism.pdf))\n\n\n"}]