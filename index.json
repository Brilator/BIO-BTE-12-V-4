[{"uri":"/BIO-BTE-12-V-4/index.html","title":"BIO-BTE-12-V-4\n","content":"# BIO-BTE-12-V-4\n\n\u003Cbr\u003E\n\nDeutscher titel: **Wissenschaftliche Programmierung f\u00FCr Biologen (Vorlesung/\u00DCbung)**\n\nEnglish title: **Scientific Programming For Biologists (Lecture \u0026 Exercise)**\n\nKIS: [BIO-BTE-12-V-4](https://www.kis.uni-kl.de/campus/all/event.asp?gguid=0xD702B068C88449BEAF7C4E9C1EEE592D\u0026tguid=0xA0CC12CC38514E09833533E643742D94)\n\n**Credit Points (CP): 3**\n\n## Table of contents\n\n- [Kursbeschreibung(deutsch)](#Kursbeschreibung-deutsch)\n    - [Ablauf](#Ablauf)\n        - [Vorlesungen](#Vorlesungen)\n        - [\u00DCbungen](#\u00DCbungen)\n    - [Zeitplan](#Zeitplan)\n- [Course description(english)](#Course-description-english)\n    - [Procedure](#Procedure)\n        - [Lectures](#Lectures)\n        - [Tasks](#Tasks)\n    - [Schedule](#Schedule)\n\n## Kursbeschreibung(deutsch)\n\nZielsetzung dieser Vorlesung mit anschlie\u00DFenden \u00DCbungen ist die Vermittlung von Kenntnissen \u00FCber Grundlagen der funktionalen und objektorientierten Programmierung sowie die Behandlung grundlegender Datenstrukturen und Algorithmen. Vermittelt werden begriffliche Grundlagen, Konzepte, Methoden und Techniken zur Darstellung und Strukturierung von Daten und zur Entwicklung von Algorithmen. Werkzeuge des wissenschaftlichen Rechnens und der Datenverabeitung, insbesondere f\u00FCr die Visualisierung und Bearbeitung von Messdaten werden vorgestellt. Die Referenzsprache ist F# (FSharp), die in Kombination mit modernen Softwarebibliotheken und der Softwareumgebung R zur Probleml\u00F6sung eingesetzt wird. Abschlie\u00DFend besteht die M\u00F6glichkeit in individuellen Projektarbeiten typische Einsatzfelder der Bioinformatik zu bearbeiten und Problemstellungen eigenst\u00E4ndig zu l\u00F6sen.\n\n## Ablauf \n\n### Vorlesungen\n\nDie Vorlesungen werden sowohl als Videoaufzeichnung als auch als PDF zur verf\u00FCgung gestellt.\n\nUm zu den jeweiligen Vorlesungen auf deutsch zu gelangen, w\u00E4hlen sie eine Vorlesung aus der sidebar links unter der Rubrik \u0060Lecture material\u0060 oder w\u00E4hlen sie die entsprechende Vorlesung aus dem [Zeitplan](#Zeitplan)\n\n### \u00DCbungen\n\n- Die \u00DCbungen der jeweiligen Vorlesung sind bis zur n\u00E4chsten \u00DCbungsbesprechung in der darauf folgenden Woche zu bearbeiten und abzugeben.\n- F\u00FCr das erfolgreiche Abschlie\u00DFen der Vorlesung und das Erhalten der CP m\u00FCssen 50% der _Gesamtpunkte aller \u00DCbungen_ erreicht werden\n- Falls nicht anders angegeben gibt jede Aufgabe/Task 1 Punkt.\n- Bitte reichen sie ihre bearbeiteten \u00DCbungen als Email mit dem titel \u0060wpb-task-XXX-RHRK_K\u00DCRZEL\u0060 und folgenden Dateianhang: \u0060wpb-task-XXX-RHRK_K\u00DCRZEL.DATEIENDUNG\u0060 ein. Die Email Adresse zur Einreichung erhalten sie gesondert.\n\n    **Ein Beispiel:** \n\n    - Sie wollen Ihre L\u00F6sungen f\u00FCr \u0060\u00DCbung01\u0060 einreichen.  \n    - Ihr RHRK K\u00FCrzel ist \u0060schneike\u0060. \n    - Sie reichen ihre \u00DCbungen als \u0060.fsx\u0060 Datei ein (dazu in der Besprechung mehr). \n\n    =\u003E der korrekte Name der Datei und damit des Emailanhangs lautet \u0060wpb-task-01-schneike.fsx\u0060\n\n    =\u003E der korrekte Titel der email lautet \u0060wpb-task-01-schneike\u0060\n    \n- Sie erhalten ihre \u00DCbungen nur auf Anfrage kontrolliert zur\u00FCck. Die \u00DCbungen werden w\u00E4hrend der Besprechung komplett besprochen und durchgearbeitet, sie k\u00F6nnen ihre L\u00F6sung also dort mit uns besprechen. Anschlie\u00DFend geben wir eine Musterl\u00F6sung aus. \n- Wir halten rechtzeitig R\u00FCcksprache mit ihnen, falls ihre Punktzahl droht unter 50% zu fallen. _Wenn wir uns nicht bei ihnen diesbez\u00FCglich melden ist also alles okay ;)_\n- Konstruktive Mitarbeit in den \u00DCbungsbesprechungen wirkt sich nicht nur positiv auf ihren Lernerfolg sondern auch auf ihre Punktzahl aus.\n\n## Zeitplan\n\n| Datum | Vorlesung (Thema bis zur Besprechung in der folgenden Woche) | \u00DCbungsbesprechung (13:00 - 15:00) |\n|---|---|---|\n| 20.04.2021 | [WPB I: Hello F#]({{root}}lectures/hello-fsharp.html) | Keine, stattdessen Hilfe bei der [Einrichtung der Programmierumgebung]({{root}}tasks/german/installationsanweisungen.html) |\n| 27.04.2021 | WPB II: Funktionen und Datentypen | [\u00DCbung01](tasks/german/wpb-uebung-01.html) |\n| 04.05.2021 | WPB III: Kontrollfluss| \u00DCbung02 |\n| 11.05.2021 | WPB IV: Programmieren mit Funktionen | \u00DCbung03 |\n| 18.05.2021 | WPB V: Programmieren mit Objekten | \u00DCbung04 |\n| 25.05.2021 | WPB VI: Typendesign | \u00DCbung05 |\n| 01.06.2021 | WPB VII: Datenvisualisierung | \u00DCbung06 |\n| 08.06.2021 | WPB VIII: Deskriptive Statistik | \u00DCbung07 |\n| 15.06.2021 | WPB IX: Datenzugriff | \u00DCbung08 |\n| 22.06.2021 | WPB X: Bioinformatik mit F# | \u00DCbung09 |\n| 29.06.2021 | WPB XI: F# \u003C\u003E R| \u00DCbung10 |\n| 06.07.2021 | Puffer(evtl. Nachbesprechung) | - |\n| 13.07.2021 | Puffer(evtl. Nachbesprechung) | - |\n| 20.07.2021 | Puffer(evtl. Nachbesprechung) | - |\n\n## Course description(english)\n\nThe aim of this lecture with subsequent exercises is to impart knowledge about the basics of functional and object-oriented programming and to deal with basic data structures and algorithms. Conceptual basics, methods and techniques for structuring data and for the development of algorithms are taught. Tools of scientific computing and data processing, especially for the visualization and processing of measurement data, are presented. The reference language is F# (FSharp), which is used in combination with modern software libraries and the R software environment for problem solving.\n\nKIS: [BIO-BTE-12-V-4](https://www.kis.uni-kl.de/campus/all/event.asp?gguid=0xD702B068C88449BEAF7C4E9C1EEE592D\u0026tguid=0xA0CC12CC38514E09833533E643742D94)\n\n## Procedure\n\n### Lectures\n\nWe try our best to provide you with at least english subtitles for our lecture videos. The lecture slides are available in english language.\n\nTo access lecture material, either head to the sidebar to the left to the respective link in the \u0060Lecture material\u0060 section or take a look at the [schedule](#Schedule)\n\n### Tasks\n\n- The tasks for the respective lectures must be done and submitted until the task session of the subsequent week.\n- To successfully finish this course you must at least score 50% of the _overall possible points of all tasks combined_\n- If not indicated otherwise, each task is worth 1 point.\n- Please submit your tasks as an email with the title \u0060wpb-task-XXX-RHRK_HANDLE\u0060 and the task as attachement with the filename \u0060wpb-task-XXX-RHRK_HANDLE.EXTENSION\u0060. The email address for submissions will be communicated seperately.\n\n    **Example:** \n\n    - You want to submit \u0060Task01\u0060.  \n    - Your RHRK handle is \u0060schneike\u0060. \n    - You submit the task as a \u0060.fsx\u0060 file (More on that during the first session). \n\n    =\u003E the correct name of the task as email attachment is \u0060wpb-task-01-schneike.fsx\u0060\n\n    =\u003E the correct email title is \u0060wpb-task-01-schneike\u0060\n    \n- You only get back corrected versions of your task by special request. The tasks will be completely solved during task sessions together with you. You can talk with us about your solutions during the session. After the session we will send out a sample solution for the task.\n- We will contact you in time should you fall below the 50% point threshold. _That means if we do not contact you, everything is fine ;)_\n- Constructive collaboration during task sessions is not only good for your personal understanding but also your overall points.\n\n## Schedule\n\n| Date | Lecture (Topic until next task session) | Task session (13:00 - 15:00) |\n|---|---|---|\n| 20.04.2021 | [WPB I: Hello F#]({{root}}lectures/hello-fsharp.html) | None, instead we help you with [setting up your programming environment]({{root}}tasks/english/installation-instructions.html) |\n| 27.04.2021 | WPB II: Functions and datatypes | [Task01]({{root}}tasks/german/wpb-uebung-01.html) |\n| 04.05.2021 | WPB III: Control flow| Task02 |\n| 11.05.2021 | WPB IV: Programming with functions | Task03 |\n| 18.05.2021 | WPB V: Programming with objects | Task04 |\n| 25.05.2021 | WPB VI: Designing with types | Task05 |\n| 01.06.2021 | WPB VII: Data visualization | Task06 |\n| 08.06.2021 | WPB VIII: Descriptive statistics | Task07 |\n| 15.06.2021 | WPB IX: Data access | Task08 |\n| 22.06.2021 | WPB X: Embracing bioinformatics in F# | Task09 |\n| 29.06.2021 | WPB XI: F# \u003C\u003E R| Task10 |\n| 06.07.2021 | Buffer(possibly debriefing) | - |\n| 13.07.2021 | Buffer(possibly debriefing) | - |\n| 20.07.2021 | Buffer(possibly debriefing) | - |\n"},{"uri":"/BIO-BTE-12-V-4/tasks/german/installationsanweisungen.html","title":"Erste Schritte","content":"(**\n---\ntitle: Erste Schritte\ncategory: \u00DCbungen(deutsch)\ncategoryindex: 2\nindex: 1\n---\n\n# Erste Schritte\n\n## Installationsanweisung\n\n* Lade die neuste stabile Version von [Visual Studio Code](https://code.visualstudio.com/) herunter und installiere sie.\n* Lade die empfohlene [.NET SDK](https://dotnet.microsoft.com/download) herunter und installiere sie.\n* \u00D6ffne Visual Studio Code, navigiere zum Reiter \u0022Extensions\u0022 und installiere:\n    * .NET Interactive Notebooks\n    * Ionide-fsharp\n    \n    ![]({{root}}img/CodeExtensions.png)\n\n\n## Bearbeiten der \u00DCbungen\n\nEs gibt drei verschiedene M\u00F6glichkeiten zum bearbeiten der \u00DCbungen:\n\n* Lokal als Notizbuch in Visual Studio Code\n* Lokal als fsx in Visual Studio Code\n* Online als Notizbuch auf Binder\n\n### Lokal als Notizbuch in Visual Studio Code\n\n* Lade das aktuelle Notizbuch von der links verlinkten Seite herunter.\n\n    ![]({{root}}img/DownloadNotebook.png)\n\n* Dr\u00FCcke \u0060Strg \u002B Shift \u002B P\u0060 oder \u0060F1\u0060 in Visual Studio Code und klicke auf \u0060.NET Interactive Open notebook\u0060.\n\n    ![]({{root}}img/OpenNotebook.png)\n\n* Navigiere zum Speicherort deines Notizbuchs und \u00F6ffne es.\n* Notizb\u00FCcher beinhalten Text- und Codebl\u00F6cke:\n    * Einen neuer Text- oder Codeblock kann hinzugef\u00FCgt werden, indem man mit dem Mauszeiger \u00FCber den oberen oder unteren Rand eines vorhandenen Blocks f\u00E4hrt:\n\n    ![]({{root}}img/AddingBlock.png)\n\n    * Arbeiten mit Textbl\u00F6cken:\n        Ein Textblock kann \u00FCber einen Doppelklick bearbeitet werden. Innerhalb eines Textblocks kannst du normalen Text schreiben, oder den Text mit [Markdown](https://en.wikipedia.org/wiki/Markdown) anpassen.\n        Sobald du fertig bist, kannst du die \u0060Esc\u0060 Taste benutzen.\n    * Arbeiten mit Codebl\u00F6cken:\n        Ein Codeblock kann \u00FCber einen Klick in dne Block bearbeitet werden. In diesem Block kannst du deinen eigenen Code schreiben, oder bereits existierenden Code bearbeiten. Sobald du mit dem bearbeiten fertig bist, kannst du \u0060Strg \u002B Alt \u002B Enter\u0060 dr\u00FCcken, um den Codeblock auszuf\u00FChren.\n        Solltest du alle Codebl\u00F6cke auf einmal ausf\u00FChren wollen, kannst du auf die beiden Pfeile in der oberen rechten Ecke des Notizbuches klicken:\n\n    ![]({{root}}img/ExecuteAll.png)\n\n### Lokal als fsx in Visual Studio Code\n\n* Lade die aktuelle fsx von der links verlinkten Seite herunter.\n\n    ![]({{root}}img/DownloadScript.png)\n\n* Dr\u00FCcke \u0060Strg \u002B O\u0060 in Visual Studio Code, navigiere zum Speicherort deiner fsx und \u00F6ffne sie.\n* Du kannst, \u00E4hnlich wie bei einem Textfile, Code \u00FCberall in der fsx schreiben. \u00DCber \u0060Alt \u002B Enter\u0060 kann der geschriebene Code ausgef\u00FChrt werden\n    * Das dr\u00FCcken von \u0060Alt \u002B Enter\u0060 in einer Zeile f\u00FChrt die aktuelle Zeile aus\n    * Wenn man einen Abschnitt markiert und dann \u0060Alt \u002B Enter\u0060 dr\u00FCckt, wird der markierte Abschnitt ausgef\u00FChrt\n* Du kannst deinen Code kommentieren, indem du \u0022//\u0022 vor deinen Kommentar setzt (z.B..: // Mein Kommentar)\n\n### Online als Notizbuch auf Binder\n\n* \u00D6ffne das aktuelle Notizbuch auf der links verlinkten Seite.\n\n    ![]({{root}}img/RunBinder.png)\n\n* Notizb\u00FCcher beinhalten Text- und Codebl\u00F6cke:\n    * Man kann einen neuen Text- oder Codeblock \u00FCber das klicken von \u0060Insert\u0060 am oberen Ende der Seite und dem Ausw\u00E4hlen der Eigenschaften \u0060Code\u0060 oder \u0060Markdown\u0060 erstellen:\n\n    ![]({{root}}img/BinderAddingBlock.png)\n\n    * Arbeiten mit Textbl\u00F6cken:\n        Ein Textblock kann \u00FCber einen Doppelklick bearbeitet werden. Innerhalb eines Textblocks kannst du normalen Text schreiben, oder den Text mit [Markdown](https://en.wikipedia.org/wiki/Markdown) anpassen.\n        Sobald du fertig bist, kannst du \u0060Strg \u002B Enter\u0060 dr\u00FCcken.\n    * Arbeiten mit Codebl\u00F6cken:\n        Ein Codeblock kann \u00FCber einen Klick in den Block bearbeitet werden. In diesem Block kannst du deinen eigenen Code schreiben, oder bereits existierenden Code bearbeiten. Sobald du mit dem bearbeiten fertig bist, kannst du \u0060Strg \u002B Enter\u0060 dr\u00FCcken, um den Codeblock auszuf\u00FChren.\n        Solltest du alle Codebl\u00F6cke auf einmal ausf\u00FChren wollen, kannst du auf die beiden Pfeile am oberen Ende des Notizbuches klicken:\n\n    ![]({{root}}img/BinderExecuteAll.png)\n*)"},{"uri":"/BIO-BTE-12-V-4/tasks/german/wpb-task-01.html","title":"\u00DCbung 01","content":"(**\n---\ntitle: \u00DCbung 01\ncategory: \u00DCbungen(deutsch)\ncategoryindex: 2\nindex: 2\n---\n*)\n\n(**\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/csbiology/BIO-BTE-12-V-4/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Task01 - Hello F#\n\n-------------------------------\n\n\nErst einmal die absoluten Basics:\n\n- **In einem .fsx script:** \n\n    Markiert die \u002710\u0027, und drueckt Alt\u002BEnter, dann sollte sich die interaktive Konsole oeffnen und euer \n    Output sollte \u0027val it: int = 10\u0027 sein.\n    (Bei einzeiligem Code koennt ihr auch einfach die Zeile auswaehlen und Alt\u002BEnter druecken ohne das alles markiert ist.)\n\n- **In einem Notebook:**\n\n    Links von dem Feld unten das die \u002710\u0027 beinhaltet befindet sich ein \u0027play\u0027 Knopf. \n    Dieser Knopf f\u00FChrt beim dr\u00FCcken den jeweiligen Code-block aus und gibt das Ergebnis (hier: 10) darunter aus.\n\n    **Codebl\u00F6cke in notebooks m\u00FCssen immer mit dem Wert enden, der ausgegben werden soll.**\n\n*)\n\n10\n\n(**\nAuf diese Weise koennt ihr Code den ihr geschrieben habt, direkt testen und euch den Output ansehen.\nVersucht das mal mit der folgenden Zeile und ihr werdet sehen, dass das Ergebnis direkt ausgerechnet wird und 30 ist.\n*)\n\n10 \u002B 20\n\n(**\nAlles was ihr hinter \u0060//\u0060 oder innerhalb von \u0060(* ... *)\u0060 schreibt ist ein Kommentar und wird nicht als Code ausgefuehrt.\nIhr koennt auch Teile einer Zeile mit \u0060(* ... *)\u0060 auskommentieren. \n\nDie Standardtastenkombination zum auskommentieren ist (Strg \u002B K -\u003E Strg \u002B C)\n*)\n\n10 (*\u002B 40 *) \u002B 30\n\n(**\nSolltet ihr bei einer Uebung nicht auf die Loesung kommen, lasst auf jeden Fall euren Loesungsansatz stehen!\n\n## Das \u0027let\u0027-Binding\n\n## Task 1\n\n### Task 1.1\n\nBinde den Wert 10 an den Namen \u0027x\u0027. Binde den Wert 20 an den Namen \u0027kaesebrot\u0027.\n*)\n\n(******)\n\n(**\n### Task 1.2\n\nBinde das Ergebnis der Addition von \u0027x\u0027 mit dem Wert 10 an \u0027y\u0027.\n*)\n\n(******)\n\n(**\n### Task 1.3\n\nBinde einen Vornamen als string an \u0027vorname\u0027.\n*)\n\n(******)\n\n(**\n### Task 1.4\n\nBerechne den Rest aus 432858049/41 und binde das Ergebnis an \u0027modulo\u0027\n*)\n\n(******)\n\n(**\n### Task 1.5\n\nBinde die Summe der jeweiligen Summen aus x \u002B 10 und y \u002B 20 an den Namen \u0027summeXY\u0027. \nDie Zwischenergebnisse sollten nicht im globalen Sichtbarkeitsbereich (Scope) liegen.\n*)\n\n(******)\n\n(**\n## Die \u0022printfn\u0022 - Funktion\n\n### Task 2\n\n_Tipp: https://docs.microsoft.com/de-de/dotnet/fsharp/language-reference/plaintext-formatting_\n\n### Task 2.1:  \n\nBenutze die printfn - Funktion um \u0022Hallo F#\u0022 in die Konsole auszugeben.\n*)\n\n(******)\n\n(**\n### Task 2.2:  \n\nBenutze die printfn - Funktion um den Wert von \u0027vorname\u0027 in die Konsole auszugeben.\n*)\n\n(******)\n\n(**\n### Task 2.3:  \n\nBenutzt printfn um \u0027y\u0027 in die Konsole auszugeben.\n*)\n\n(******)\n\n(**\n## Primitive Datentypen und Funktionen\n\n### Task 3\n\n### Task 3.1\n\nBinde einen beliebigen Wert vom Typ Integer an den Namen intI.\n*)\n\n(******)\n\n(**\n### Task 3.2\n\nBinde einen beliebigen Wert vom Typ Float an den Namen floatI.\n*)\n\n(******)\n\n(**\n### Task 3.3\n\nWandelt entweder intI oder floatI in den Datentyp des anderen um und addiert beide.\n*)\n\n(******)\n\n(**\n### Task 3.4\n\nBerechne den Quotienten aus \u002727\u0027 und \u002713\u0027. Dann berechne den Quotienten von beiden Integern als Float.\n*)\n\n(******)\n\n(**\n### Task 3.5:\n\nKonkateniere einen beliebigen Wert vom Typ String mit einem einzelnem Buchstaben (Typ Char)\n*)\n\n(******)\n\n(**\n### Task 3.6:\n\nDeklariere eine Funktion \u0027mulitplyBy2\u0027 die einen float verdoppelt. \n*)\n\n(******)\n\n(**\n### Task 3.7:  \n\nDeklariere eine Funktion \u0027calculateCylinderVolume\u0027 die aus Radius und Laenge das Volumen eines Zylinders \nzurueckgibt UND zusaetzlich \u0022Das Volumen des Zylinders ist: XX\u0022 in die Konsole printed. Wobei XX natuerlich \ndas korrekte Volumen des Zylinders ist. (Der Output einer printfn Funktion ist Unit.)\nWarum kann es Sinn machen, Ergebnisse zu printen? \n*)\n\n(******)\n\n(**\n### Task 3.8:  \n\nDeklariere eine Funktion die einen Parameter vom Typ Integer als Input nimmt und die \u0027multiplyBy2\u0027 \nFuntkion darauf anwendet\n*)\n\n(******)\n\n(**\n### Task 3.9:  \n\nDeklariere eine Funktion die als Input zwei Parameter vom Typ Floats, einen Vergleichsoperator z.B. \n(\u003C, \u003E, = ), und einen Parameter vom Typ Boolean akzeptiert. Das Ergebnis aus der Anwendung des angegebenen \nOperators auf die numerischen Parameter soll mit dem Parameter vom Typ Boolean auf Gleichheit ueberprueft werden.\n\n(_2 Punkte_)\n\n*)\n\n(******)"},{"uri":"/BIO-BTE-12-V-4/tasks/english/installation-instructions.html","title":"Getting Started","content":"(**\n---\ntitle: Getting Started\ncategory: Tasks(english)\ncategoryindex: 3\nindex: 1\n---\n\n# Getting Started\n\n## Installation instructions\n\n* Download the latest stable build for [Visual Studio Code](https://code.visualstudio.com/) and install it.\n* Download the recommended [.NET SDK](https://dotnet.microsoft.com/download) and install it.\n* Open Visual Studio Code, navigate to the \u0022Extensions\u0022 tab and install\n    * .NET Interactive Notebooks\n    * Ionide-fsharp\n    \n    ![]({{root}}img/CodeExtensions.png)\n\n\n## Working on Exercises\n\nThere are three different possibilities to work on the exercises:\n\n* Locally as notebook in Visual Studio Code\n* Locally as fsx in Visual Studio Code\n* Online as notebook on Binder\n\n### Locally as notebook in Visual Studio Code\n\n* Download the current notebook from the page linked on the left.\n\n    ![]({{root}}img/DownloadNotebook.png)\n\n* In Visual Studio Code press \u0060Ctrl \u002B Shift \u002B P\u0060 or \u0060F1\u0060 and klick on \u0060.NET Interactive Open notebook\u0060.\n\n    ![]({{root}}img/OpenNotebook.png)\n\n* Navigate to the location of your notebook and open it.\n* Notebooks contain Text- and Codeblocks:\n    * Adding a new Text- or Codeblock can be done by hovering at the upper or lower border of an existing block:\n\n    ![]({{root}}img/AddingBlock.png)\n\n    * Working with Textblocks:\n        You can edit a Textblock by doubleklicking on it. Inside a Textblock you can write plain text or style it with [Markdown](https://en.wikipedia.org/wiki/Markdown).\n        Once you are finished you can press the \u0060Esc\u0060 button.\n    * Working with Codeblocks:\n        You can start editing any Codeblock by clicking in it. In there you can start writing your own code or edit existing code. Once you are done you can execute the Codeblock by pressing \u0060Ctrl \u002B Alt \u002B Return\u0060.\n        If you want to execute all codeblocks at once, you can press on the two arrows in the upper right corner of the notebook:\n\n    ![]({{root}}img/ExecuteAll.png)\n\n### Locally as fsx in Visual Studio Code\n\n* Download the current fsx from the page linked on the left.\n\n    ![]({{root}}img/DownloadScript.png)\n\n* In Visual Studio Code press \u0060Ctrl \u002B O\u0060, navigate to the location of your fsx and open it.\n* You can write code anywhere in the fsx file, similar to a normal text file, and execute it by pressing \u0060Alt \u002B Return\u0060\n    * Pressing \u0060Alt \u002B Return\u0060 in a line will execute the current line\n    * Marking a section and pressing \u0060Alt \u002B Return\u0060 will execute the marked section\n* You can comment your code by prefixing your comment with \u0022//\u0022 (e.g.: // My Comment)\n\n### Online as notebook on Binder\n\n* Open the current notebook from the page linked on the left.\n\n    ![]({{root}}img/RunBinder.png)\n\n* Notebooks contain Text- and Codeblocks:\n    * Adding a new Text- or Codeblock can be done by clicking \u0060Insert\u0060 at the top of the page and choosing \u0060Code\u0060 or \u0060Markdown\u0060 as property:\n\n    ![]({{root}}img/BinderAddingBlock.png)\n\n    * Working with Textblocks:\n        You can edit a Textblock by doubleklicking on it. Inside a Textblock you can write plain text or style it with [Markdown](https://en.wikipedia.org/wiki/Markdown).\n        Once you are finished you can press \u0060Ctrl \u002B Return\u0060.\n    * Working with Codeblocks:\n        You can start editing any Codeblock by clicking in it. In there you can start writing your own code or edit existing code. Once you are done you can execute the Codeblock by pressing \u0060Ctrl \u002B Return\u0060.\n        If you want to execute all codeblocks at once, you can klick on the two arrows at the top of the notebook:\n\n    ![]({{root}}img/BinderExecuteAll.png)\n\n*)\n"},{"uri":"/BIO-BTE-12-V-4/tasks/english/wpb-task-01.html","title":"Task 01","content":"(**\n---\ntitle: Task 01 \ncategory: Tasks(english)\ncategoryindex: 3\nindex: 2\n---\n*)\n\n(**\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/csbiology/BIO-BTE-12-V-4/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Task01 - Hello F#\n\n-------------------------------\n\n\nLet\u0027s start with the basics:\n\n- **In a .fsx script:** \n\n    Highlight the \u002710\u0027 and press Alt\u002BEnter, which will open a console and give the output \u0027val it: int = 10\u0027.\n    (If the code to execute has only one line, you can just click into the line and press Alt\u002BEnter without highlighting.)\n\n- **In a notebook:**\n\n    There is a \u0027play\u0027 button in the left upper corner of the field below. Press it to execute the respective code block, \n    which in this case will simply give \u002710\u0027 as output. \n\n    **Note that you always have to end codeblocks in notebooks with the value you want to put out**\n\n*)\n\n10\n\n(**\nWorking in this interactive way has the advantage that you can always directly test your code and look at the output.\nTry it with the line below and appreciate that the result of the calculation is 30.\n*)\n\n10 \u002B 20\n\n(**\nEverything after a \u0060//\u0060 or inside of \u0060(* ... *)\u0060 is treated as a comment and will not get executed as code.\nYou can use \u0060(* ... *)\u0060 to comment parts of a single line. \nThe standard keybinding for commenting a selection is (Strg \u002B K -\u003E Strg \u002B C)\n\n*)\n\n10 (*\u002B 40 *) \u002B 30\n\n(**\nIf you not quite get a task right, please submit partial solutions or trails of thought as comments to get partial points!\n\n## Das \u0027let\u0027-Binding\n\n## Task 1\n\n### Task 1.1\n\nBind the value 10 to the name \u0027x\u0027. Bind the value 20 to the name \u0027kaesebrot\u0027.\n*)\n\n(******)\n\n(**\n### Task 1.2\n\nBind the result of the Addition of \u0027x\u0027 and 10 to the name \u0027y\u0027.\n*)\n\n(******)\n\n(**\n### Task 1.3\n\nBind any first name as string to \u0027vorname\u0027.\n*)\n\n(******)\n\n(**\n### Task 1.4\n\nCalculate the remainder of 432858049/41 and bind the result to \u0027modulo\u0027\n*)\n\n(******)\n\n(**\n### Task 1.5\n\nBinde the sum of both sums (x \u002B 10) and (y \u002B 20) to the Name \u0027sumXY\u0027. \nDie Zwischenergebnisse sollten nicht im globalen Sichtbarkeitsbereich (Scope) liegen.\n*)\n\n(******)\n\n(**\n## Die \u0022printfn\u0022 - Funktion\n\n### Task 2\n\n_Tipp: https://docs.microsoft.com/de-de/dotnet/fsharp/language-reference/plaintext-formatting_\n\n### Task 2.1:  \n\nUse the printfn function to print \u0022Hello F#\u0022 to the console.\n*)\n\n(******)\n\n(**\n### Task 2.2:  \n\nUse the printfn function to print the value of \u0027vorname\u0027 to the console.\n*)\n\n(******)\n\n(**\n### Task 2.3:  \n\nUse the printfn function to print the value of \u0027y\u0027 to the console.\n*)\n\n(******)\n\n(**\n## Primitive Datentypen und Funktionen\n\n### Task 3\n\n### Task 3.1\n\nBind an arbitrary integer value to the name intI.\n*)\n\n(******)\n\n(**\n### Task 3.2\n\nBind an arbitrary float value to the name floatI.\n*)\n\n(******)\n\n(**\n### Task 3.3\n\nConvert one of intI or floatI to the data type of the other and sum both up.\n*)\n\n(******)\n\n(**\n### Task 3.4\n\nCalculate the integer division of \u002727\u0027 und \u002713\u0027. Then perform the same operation but on \u002727\u0027 and \u002713\u0027 as float values.\n*)\n\n(******)\n\n(**\n### Task 3.5:\n\nConcatenate an arbitrary string value with an arbitrary char (character)\n*)\n\n(******)\n\n(**\n### Task 3.6:\n\nDeclare a function named \u0027mulitplyBy2\u0027 that doubles a single input float.\n\n*)\n\n(******)\n\n(**\n### Task 3.7:  \n\nDeclare a function named \u0027calculateCylinderVolume\u0027 that takes radius and length of a cylinder as inputs and \nreturns the cylinders volume AND additionally prints the message \u0022The volume of the cylinder is XXX\u0022 (where XXX is the volume)\n\nWhy can it make sense to print values inside a function before returning a value?\n*)\n\n(******)\n\n(**\n### Task 3.8:  \n\nDeclare a function that takes an integer as input, converts it, and applies the previously defined \u0027multiplyBy2\u0027 function on it.\n\n*)\n\n(******)\n\n(**\n### Task 3.9:  \n\nDeclare a function that takes the feollowing inputs:\n\n- two floats\n- a comparison operator (\u003C, \u003E, = )\n- a boolean\n\nThe function should then compare the result of applying the operator to the two \nfloat inputs with the boolean input and return the result.\n\n(_2 Points_)\n\n*)\n\n(******)"},{"uri":"/BIO-BTE-12-V-4/lectures/hello-fsharp.html","title":"WPB I - Hello F#","content":"---\ntitle: WPB I - Hello F#\ncategory: Lecture material\ncategoryindex: 1\nindex: 1\n---\n\n# WPB I - Hello F#\n\nAn introduction to scientific programming using the F# programming language:\n\n- WPB I.01 : Einf\u00FChrung und Motivation / Introduction and motivation\n- WPB I.02 : Funktionen_und_Wertebindung / Functions and value bindings\n- WPB I.03 : Sichtbarkeitsbereich / Scope\n- WPB I.04 : Primitive_Datentypen / Primitive data types\n \n\n## Lecture videos (click to expand and watch)\n\n- \u003Ca href=\u0022#vimeo-1\u0022 data-action=\u0022collapse\u0022\u003EWPB I.01 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-1\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/407241742\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-2\u0022 data-action=\u0022collapse\u0022\u003EWPB I.02 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-2\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/407247350\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-3\u0022 data-action=\u0022collapse\u0022\u003EWPB I.03 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-3\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/407545667\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-4\u0022 data-action=\u0022collapse\u0022\u003EWPB I.04 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-4\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/407723990\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\n## Slides\n\n- WPB I.01 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/I01_Einf%C3%BChrung_und_Motivation.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/I01_Introduction_and_motivation.pdf))\n- WPB I.02 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/I02_Funktionen_und_Wertebindung.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/I02_Functions_and_value_bindings.pdf))\n- WPB I.03 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/I03_Scope.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/I03_Scope.pdf))\n-  WPB I.04 ([deutsch](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/I04_Primitive_Datentypen.pdf) / [english](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/eng/I04_Primitive_data_types.pdf))\n"}]