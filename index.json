[{"uri":"/BIO-BTE-12-V-4/index.html","title":"Wissenschaftliche Programmierung f\u00FCr Biologen (Vorlesung/\u00DCbung)\n","content":"# Wissenschaftliche Programmierung f\u00FCr Biologen (Vorlesung/\u00DCbung)\n\n**Credit Points (CP): 3**\n\nZielsetzung dieser Vorlesung mit anschlie\u00DFenden \u00DCbungen ist die Vermittlung von Kenntnissen \u00FCber Grundlagen der funktionalen und objektorientierte Programmierung sowie die Behandlung grundlegender Datenstrukturen und Algorithmen. Vermittelt werden begriffliche Grundlagen, Konzepte, Methoden und Techniken zur Darstellung und Strukturierung von Daten und zur Entwicklung von Algorithmen. Werkzeuge des wissenschaftlichen Rechnens und der Datenverabeitung, insbesondere f\u00FCr die Visualisierung und Bearbeitung von Messdaten werden vorgestellt. Die Referenzsprache ist F# (FSharp), die in Kombination mit modernen Softwarebibliotheken und der Softwareumgebung R zur Probleml\u00F6sung eingesetzt wird. Abschlie\u00DFend besteht die M\u00F6glichkeit in individuellen Projektarbeiten typische Einsatzfelder der Bioinformatik zu bearbeiten und Problemstellungen eigenst\u00E4ndig zu l\u00F6sen.\n\nKIS: [BIO-BTE-12-V-4](https://www.kis.uni-kl.de/campus/all/event.asp?gguid=0xD702B068C88449BEAF7C4E9C1EEE592D\u0026tguid=0xA0CC12CC38514E09833533E643742D94)\n\n## Vorlesungsmaterial\n\nUm zu den jeweiligen Vorlesungen auf deutsch zu gelangen, w\u00E4hlen sie eine Vorlesung aus der folgenden Liste oder links unter der Rubrik \u0060Vorlesungsmaterial (deutsch)\u0060\n\n- [1 Hello F#](./lectures/german/hello-fsharp.html)\n\n# SCIENTIFIC PROGRAMMING FOR BIOLOGISTS (LECTURE \u0026 EXERCISE)\n\n**Credit Points (CP): 3**\n\nThe aim of this lecture with subsequent exercises is to impart knowledge about the basics of functional and object-oriented programming and to deal with basic data structures and algorithms. Conceptual basics, methods and techniques for structuring data and for the development of algorithms are taught. Tools of scientific computing and data processing, especially for the visualization and processing of measurement data, are presented. The reference language is F# (FSharp), which is used in combination with modern software libraries and the R! software environment for problem solving.\n\nKIS: [BIO-BTE-12-V-4](https://www.kis.uni-kl.de/campus/all/event.asp?gguid=0xD702B068C88449BEAF7C4E9C1EEE592D\u0026tguid=0xA0CC12CC38514E09833533E643742D94)\n\n## Lecture material\n\nTo get to the lecture material in english, choose a lecture from the list below or from the lefthand navigation bar under \u0060Lecture material (english)\u0060\n\n- [1 Hello F#](./lectures/english/hello-fsharp.html)\n\n"},{"uri":"/BIO-BTE-12-V-4/tasks/german/installationsanweisungen.html","title":"Installationsanweisungen","content":"(**\n---\ntitle: Installationsanweisungen\ncategory: \u00DCbungen(deutsch)\ncategoryindex: 2\nindex: 1\n---\n\n# Installation\n\n* Lade die neuste stabile Version von [Visual Studio Code](https://code.visualstudio.com/) herunter und installiere sie.\n* Lade die empfohlene [.NET SDK](https://dotnet.microsoft.com/download) herunter und installiere sie.\n* Oeffne Visual Studio Code, navigiere zum Reiter \u0022Extensions\u0022 und installiere:\n    * .NET Interactive Notebooks\n    * Ionide-fsharp\n    \n    ![](https://raw.githubusercontent.com/CSBiology/BIO-BTE-12-V-4/main/docs/img/CodeExtensions.png)\n\n* Lade das aktuelle Notizbuch von der links verlinkten Seite herunter.\n\n    ![](https://raw.githubusercontent.com/CSBiology/BIO-BTE-12-V-4/main/docs/img/DownloadNotebook.png)\n\n* Druecke \u0060Strg \u002B Shift \u002B P\u0060 oder \u0060F1\u0060 in Visual Studio Code und klicke auf \u0060.NET Interactive Open notebook\u0060.\n\n    ![](https://raw.githubusercontent.com/CSBiology/BIO-BTE-12-V-4/main/docs/img/OpenNotebook.png)\n\n* Navigiere zum Speicherort deines Notizbuchs und oeffne es.\n* Notizbuecher beinhalten Text- und Codebloecke:\n    * Einen neuer Text- oder Codeblock kann hinzugefuegt werden, indem man mit dem Mauszeiger ueber den oberen oder unteren Rand eines vorhandenen Blocks faehrt:\n\n    ![](https://raw.githubusercontent.com/CSBiology/BIO-BTE-12-V-4/main/docs/img/AddingBlock.png)\n\n    * Arbeiten mit Textbloecken:\n        Ein Textblock kann ueber einen Doppelklick bearbeitet werden. Innerhalb eines Textblocks kannst du normalen Text schreiben, oder den Text mit [Markdown](https://en.wikipedia.org/wiki/Markdown) anpassen.\n        Sobald du fertig bist, kannst du die \u0060Esc\u0060 Taste benutzen.\n    * Arbeiten mit Codebloecken:\n        Ein Codeblock kann ueber einen Klick in dne Block bearbeitet werden. In diesem Block kannst du deinen eigenen Code schreiben, oder bereits existierenden Code bearbeiten. Sobald du mit dem bearbeiten fertig bist, kannst du \u0060Strg \u002B Alt \u002B Enter\u0060 druecken, um den Codeblock auszufuehren.\n        Solltest du alle Codebloecke auf einmal ausfuehren wollen, kannst du auf die beiden Pfeile in der oberen rechten Ecke des Notizbuches klicken:\n\n    ![](https://raw.githubusercontent.com/CSBiology/BIO-BTE-12-V-4/main/docs/img/ExecuteAll.png)\n*)"},{"uri":"/BIO-BTE-12-V-4/tasks/german/wpb-uebung-01.html","title":"\u00DCbung 01","content":"(**\n---\ntitle: \u00DCbung 01\ncategory: \u00DCbungen(deutsch)\ncategoryindex: 2\nindex: 2\n---\n*)\n\n(**\n# \u00DCbung 1\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/csbiology/BIO-BTE-12-V-4/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n*)\n\n//************************************************************************************\n//*                                                                                  *\n//*                           uebung 1 - Hello F#                                     *\n//*                                                                                  *\n//************************************************************************************\n\n//Erst einmal die absoluten Basics:\n\n10\n\n//Markiert die \u002710\u0027 und drueckt Alt\u002BEnter, dann sollte sich die interaktive Konsole oeffnen und euer Output sollte \u0027val it : int = 10\u0027 sein.\n//(Bei einzeiligem Code koennt ihr auch einfach die Zeile auswaehlen und Alt\u002BEnter druecken ohne das alles markiert ist.)\n//Auf diese Weise koennte ihr Code den ihr geschrieben habt, direkt testen und euch den Output ansehen.\n\n//Versucht das mal mit der folgenden Zeile und ihr werdet sehen, dass das Ergebnis direkt ausgerechnet wird und \u0027int = 30\u0027 ist.\n\n10 \u002B 20\n\n\n// Alles was ihr hinter \u0022//\u0022 schreibt ist ein Kommentar und wird nicht als Code ausgefuehrt.\n// Ihr koennt auch Teile einer Zeile auskommentieren mit der Tastenkombination (Strg \u002B K -\u003E Strg \u002B C)\n\n10 (*\u002B 40 *) \u002B 30\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////      TASKS for Excercise 1       //////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Solltet ihr bei einer uebung nicht auf die Loesung kommen, lasst auf jeden Fall euren Loesungsansatz stehen!\n\n//\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\n// Das \u0027let\u0027-Binding\n//\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\n\n//      Task 1\n\n// Task 1.1:  ---------------------------------------------------------------------------------------------------\n// Binde den Wert 10 an den Namen \u0027x\u0027. Binde den Wert 20 an den Namen \u0027kaesebrot\u0027.\n\n\n\n// Task 1.2:  ---------------------------------------------------------------------------------------------------\n// Binde das Ergebnis der Addition von \u0027x\u0027 mit dem Wert 10 an \u0027y\u0027.\n\n\n\n// Task 1.3:  ---------------------------------------------------------------------------------------------------\n// Binde einen Vornamen als string an \u0027vorname\u0027.\n\n\n\n// Task 1.4:  ---------------------------------------------------------------------------------------------------\n// Berechne den Rest aus 432858049/41 und binde das Ergebnis an \u0027modulo\u0027\n\n\n\n// Task 1.5:  ---------------------------------------------------------------------------------------------------\n// Binde das Ergebnis der Summen aus x \u002B 10 und y \u002B 20 mit x,y - Werten deiner Wahl an den Namen \u0027summeXY\u0027. \n// Die Zwischenergebnisse sollten   nicht im globalen Sichtbarkeitsbereich (Scope) liegen.\n\n\n\n//\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\n// Die \u0022printfn\u0022 - Funktion\n//\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\n\n//      Task 2\n\n//Tipp: https://fsharpforfunandprofit.com/posts/printf/\n\n// Task 2.1:  ---------------------------------------------------------------------------------------------------\n// Benutze die printfn - Funktion um \u0022Hallo F#\u0022 in die Konsole auszugeben.\n\n\n\n// Task 2.2:  ---------------------------------------------------------------------------------------------------\n// Benutze die printfn - Funktion um den Wert von \u0027vorname\u0027 in die Konsole auszugeben.\n\n\n\n// Task 2.3:  ---------------------------------------------------------------------------------------------------\n// Benutzt printfn um \u0027y\u0027 in die Konsole auszugeben.\n\n\n//\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\n// Primitive Datentypen und Funktionen\n//\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\n\n//      Task 3\n\n// Task 3.1:  ---------------------------------------------------------------------------------------------------\n// Binde einen beliebigen Wert vom Typ Integer an den Namen intI.\n\n\n\n// Task 3.2:  ---------------------------------------------------------------------------------------------------\n// Binde einen beliebigen Wert vom Typ Float an den Namen floatI.\n\n\n// Task 3.3:  ---------------------------------------------------------------------------------------------------\n// Wandelt entweder intI oder floatI in den Datentyp des anderen um und addiert beide.\n\n\n\n// Task 3.4:  ---------------------------------------------------------------------------------------------------\n// Berechne den Quotienten aus \u002727\u0027 und \u002713\u0027. Dann berechne den Quotienten von beiden Integern als Float.\n\n\n\n// Task 3.5:  ---------------------------------------------------------------------------------------------------\n// Konkateniere einen beliebigen Wert vom Typ String mit einem einzelnem Buchstaben (Typ Char)\n\n\n\n// Task 3.6:  ---------------------------------------------------------------------------------------------------\n// Deklariere eine Funktion \u0027mulitplyBy2\u0027 die einen float verdoppelt. \n\n\n\n// Task 3.7:  ---------------------------------------------------------------------------------------------------\n// Deklariere eine Funktion \u0027calculateCylinderVolume\u0027 die aus Radius und Laenge das Volumen eines Zylinders \n// zurueckgibt UND zusaetzlich \u0022Das Volumen des Zylinders ist: XX\u0022 in die Konsole printed. Wobei XX natuerlich \n// das korrekte Volumen des Zylinders ist. (Der Output einer printfn Funktion ist Unit.)\n// Warum kann es Sinn machen, Ergebnisse zu printen?\n\n\n\n// Task 3.8:  ---------------------------------------------------------------------------------------------------\n// Deklariere eine Funktion die einen Parameter vom Typ Integer als Input nimmt und die \u0027multiplyBy2\u0027 \n// Funtkion darauf anwendet\n\n\n\n// Task 3.9:  ---------------------------------------------------------------------------------------------------\n// Deklariere eine Funktion die als Input zwei Parameter vom Typ Floats, einen Vergleichsoperator z.B. \n// (\u003C, \u003E, = ), und einen Parameter vom Typ Boolean akzeptiert. Das Ergebnis aus der Anwendung des angegebenen \n// Operators auf die numerischen Parameter soll mit dem Parameter vom Typ Boolean auf Gleichheit ueberprueft werden."},{"uri":"/BIO-BTE-12-V-4/tasks/english/installation-instructions.html","title":"Installation instructions","content":"(**\n---\ntitle: Installation instructions\ncategory: Tasks(english)\ncategoryindex: 4\nindex: 1\n---\n\n# Installation\n\n* Download the latest stable build for [Visual Studio Code](https://code.visualstudio.com/) and install it.\n* Download the recommended [.NET SDK](https://dotnet.microsoft.com/download) and install it.\n* Open Visual Studio Code, navigate to the \u0022Extensions\u0022 tab and install\n    * .NET Interactive Notebooks\n    * Ionide-fsharp\n    \n    ![](https://raw.githubusercontent.com/CSBiology/BIO-BTE-12-V-4/main/docs/img/CodeExtensions.png)\n\n* Download the current notebook from the page linked on the left.\n\n    ![](https://raw.githubusercontent.com/CSBiology/BIO-BTE-12-V-4/main/docs/img/DownloadNotebook.png)\n\n* In Visual Studio Code press \u0060Strg \u002B Shift \u002B P\u0060 or \u0060F1\u0060 and klick on \u0060.NET Interactive Open notebook\u0060.\n\n    ![](https://raw.githubusercontent.com/CSBiology/BIO-BTE-12-V-4/main/docs/img/OpenNotebook.png)\n\n* Navigate to the location of your notebook and open it.\n* Notebooks contain Text- and Codeblocks:\n    * Adding a new Text- or Codeblock can be done by hovering at the upper or lower border of an existing block:\n\n    ![](https://raw.githubusercontent.com/CSBiology/BIO-BTE-12-V-4/main/docs/img/AddingBlock.png)\n\n    * Working with Textblocks:\n        You can edit a Textblock by doubleklicking on it. Inside a Textblock you can write plain text or style it with [Markdown](https://en.wikipedia.org/wiki/Markdown).\n        Once you are finished you can press the \u0060Esc\u0060 button.\n    * Working with Codeblocks:\n        You can start editing any Codeblock by clicking in it. In there you can start writing your own code or edit existing code. Once you are done you can execute the Codeblock by pressing \u0060Strg \u002B Alt \u002B Enter\u0060.\n        If you want to execute all codeblocks at once, you can press on the two arrows in the upper right corner of the notebook:\n\n    ![](https://raw.githubusercontent.com/CSBiology/BIO-BTE-12-V-4/main/docs/img/ExecuteAll.png)\n*)\n"},{"uri":"/BIO-BTE-12-V-4/tasks/english/wpb-task-01.html","title":"Task 01","content":"(**\n---\ntitle: Task 01 \ncategory: Tasks(english)\ncategoryindex: 4\nindex: 2\n---\n*)\n\n//************************************************************************************\n//*                                                                                  *\n//*                           task 1 - Hello F#                                      *\n//*                                                                                  *\n//************************************************************************************\n\n//Let\u0027s start with the basics:\n\n10\n\n//highlight the \u002710\u0027 and presst Alt\u002BEnter, which will open the F# interactive console and execute the highlighted code. \n//The output should be \u0027val it : int = 10\u0027 sein.\n//(Bei einzeiligem Code koennt ihr auch einfach die Zeile auswaehlen und Alt\u002BEnter druecken ohne das alles markiert ist.)\n//Auf diese Weise koennte ihr Code den ihr geschrieben habt, direkt testen und euch den Output ansehen.\n\n//Versucht das mal mit der folgenden Zeile und ihr werdet sehen, dass das Ergebnis direkt ausgerechnet wird und \u0027int = 30\u0027 ist.\n\n10 \u002B 20\n\n\n// Alles was ihr hinter \u0022//\u0022 schreibt ist ein Kommentar und wird nicht als Code ausgefuehrt.\n// Ihr koennt auch Teile einer Zeile auskommentieren mit der Tastenkombination (Strg \u002B K -\u003E Strg \u002B C)\n\n10 (*\u002B 40 *) \u002B 30\n\n// Solltet ihr bei einer uebung nicht auf die Loesung kommen, lasst auf jeden Fall euren Loesungsansatz stehen!\n\n//\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\n// Das \u0027let\u0027-Binding\n//\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\n\n//      Task 1\n\n// Task 1.1:  ---------------------------------------------------------------------------------------------------\n// Binde den Wert 10 an den Namen \u0027x\u0027. Binde den Wert 20 an den Namen \u0027kaesebrot\u0027.\n\n\n\n// Task 1.2:  ---------------------------------------------------------------------------------------------------\n// Binde das Ergebnis der Addition von \u0027x\u0027 mit dem Wert 10 an \u0027y\u0027.\n\n\n\n// Task 1.3:  ---------------------------------------------------------------------------------------------------\n// Binde einen Vornamen als string an \u0027vorname\u0027.\n\n\n\n// Task 1.4:  ---------------------------------------------------------------------------------------------------\n// Berechne den Rest aus 432858049/41 und binde das Ergebnis an \u0027modulo\u0027\n\n\n\n// Task 1.5:  ---------------------------------------------------------------------------------------------------\n// Binde das Ergebnis der Summen aus x \u002B 10 und y \u002B 20 mit x,y - Werten deiner Wahl an den Namen \u0027summeXY\u0027. \n// Die Zwischenergebnisse sollten   nicht im globalen Sichtbarkeitsbereich (Scope) liegen.\n\n\n\n//\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\n// Die \u0022printfn\u0022 - Funktion\n//\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\n\n//      Task 2\n\n//Tipp: https://fsharpforfunandprofit.com/posts/printf/\n\n// Task 2.1:  ---------------------------------------------------------------------------------------------------\n// Benutze die printfn - Funktion um \u0022Hallo F#\u0022 in die Konsole auszugeben.\n\n\n\n// Task 2.2:  ---------------------------------------------------------------------------------------------------\n// Benutze die printfn - Funktion um den Wert von \u0027vorname\u0027 in die Konsole auszugeben.\n\n\n\n// Task 2.3:  ---------------------------------------------------------------------------------------------------\n// Benutzt printfn um \u0027y\u0027 in die Konsole auszugeben.\n\n\n//\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\n// Primitive Datentypen und Funktionen\n//\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\n\n//      Task 3\n\n// Task 3.1:  ---------------------------------------------------------------------------------------------------\n// Binde einen beliebigen Wert vom Typ Integer an den Namen intI.\n\n\n\n// Task 3.2:  ---------------------------------------------------------------------------------------------------\n// Binde einen beliebigen Wert vom Typ Float an den Namen floatI.\n\n\n// Task 3.3:  ---------------------------------------------------------------------------------------------------\n// Wandelt entweder intI oder floatI in den Datentyp des anderen um und addiert beide.\n\n\n\n// Task 3.4:  ---------------------------------------------------------------------------------------------------\n// Berechne den Quotienten aus \u002727\u0027 und \u002713\u0027. Dann berechne den Quotienten von beiden Integern als Float.\n\n\n\n// Task 3.5:  ---------------------------------------------------------------------------------------------------\n// Konkateniere einen beliebigen Wert vom Typ String mit einem einzelnem Buchstaben (Typ Char)\n\n\n\n// Task 3.6:  ---------------------------------------------------------------------------------------------------\n// Deklariere eine Funktion \u0027mulitplyBy2\u0027 die einen float verdoppelt. \n\n\n\n// Task 3.7:  ---------------------------------------------------------------------------------------------------\n// Deklariere eine Funktion \u0027calculateCylinderVolume\u0027 die aus Radius und Laenge das Volumen eines Zylinders \n// zurueckgibt UND zusaetzlich \u0022Das Volumen des Zylinders ist: XX\u0022 in die Konsole printed. Wobei XX natuerlich \n// das korrekte Volumen des Zylinders ist. (Der Output einer printfn Funktion ist Unit.)\n// Warum kann es Sinn machen, Ergebnisse zu printen?\n\n\n\n// Task 3.8:  ---------------------------------------------------------------------------------------------------\n// Deklariere eine Funktion die einen Parameter vom Typ Integer als Input nimmt und die \u0027multiplyBy2\u0027 \n// Funtkion darauf anwendet\n\n\n\n// Task 3.9:  ---------------------------------------------------------------------------------------------------\n// Deklariere eine Funktion die als Input zwei Parameter vom Typ Floats, einen Vergleichsoperator z.B. \n// (\u003C, \u003E, = ), und einen Parameter vom Typ Boolean akzeptiert. Das Ergebnis aus der Anwendung des angegebenen \n// Operators auf die numerischen Parameter soll mit dem Parameter vom Typ Boolean auf Gleichheit ueberprueft werden."},{"uri":"/BIO-BTE-12-V-4/lectures/german/hello-fsharp.html","title":"1 HELLO F#","content":"---\ntitle: 1 HELLO F#\ncategory: Vorlesungsmaterial(deutsch)\ncategoryindex: 1\nindex: 1\n---\n\n# 1 HELLO F#\n\nEine Einf\u00FChrung in die wissenschaftliche Programmierung mithilfe der Programmiersprache F#\n\n## Vorlesungsvideos (zum ansehen klicken)\n\n- \u003Ca href=\u0022#vimeo-1\u0022 data-action=\u0022collapse\u0022\u003EWPB I.01 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-1\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/407241742\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-2\u0022 data-action=\u0022collapse\u0022\u003EWPB I.02 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-2\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/407247350\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-3\u0022 data-action=\u0022collapse\u0022\u003EWPB I.03 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-3\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/407545667\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-4\u0022 data-action=\u0022collapse\u0022\u003EWPB I.04 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-4\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/407723990\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\n## Vorlesungsfolien\n\n- [Folien: WPB I.01 Einf\u00FChrung und Motivation](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/I01_Einf%C3%BChrung_und_Motivation.pdf)\n- [Folien: WPB I.02 Funktionen und Wertebindung](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/I02_Funktionen_und_Wertebindung.pdf)\n- [Folien: WPB I.03 Scope (Sichtbarkeitsbereich)](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/I03_Scope.pdf)\n- [Folien: WPB I.04 PrimitiveDatentypen](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/I04_Primitive_Datentypen.pdf)\n\n## \u00DCbungsmaterial\n\n"},{"uri":"/BIO-BTE-12-V-4/lectures/english/hello-fsharp.html","title":"1 HELLO F#","content":"---\ntitle: 1 HELLO F#\ncategory: Lecture material(english)\ncategoryindex: 3\nindex: 1\n---\n\n# 1 HELLO F#\n\nAn introduction to scientific programming using the F# programming language\n\n## Lecture videos (click to expand and watch)\n\n- \u003Ca href=\u0022#vimeo-1\u0022 data-action=\u0022collapse\u0022\u003EWPB I.01 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-1\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/407241742\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-2\u0022 data-action=\u0022collapse\u0022\u003EWPB I.02 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-2\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/407247350\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-3\u0022 data-action=\u0022collapse\u0022\u003EWPB I.03 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-3\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/407545667\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n- \u003Ca href=\u0022#vimeo-4\u0022 data-action=\u0022collapse\u0022\u003EWPB I.04 \u003C/a\u003E\u003C/p\u003E\n\u003Cdiv id=\u0022vimeo-4\u0022 class=\u0022is-collapsible\u0022\u003E\n    \u003Ciframe title=\u0022vimeo-player\u0022 src=\u0022https://player.vimeo.com/video/407723990\u0022 width=\u0022640\u0022 height=\u0022360\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022allowfullscreen\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\n## Lecture slides\n\n- [Folien: WPB I.01 Einf\u00FChrung und Motivation](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/I01_Einf%C3%BChrung_und_Motivation.pdf)\n- [Folien: WPB I.02 Funktionen und Wertebindung.pdf](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/I02_Funktionen_und_Wertebindung.pdf)\n- [Folien: WPB I.03 Scope (Sichtbarkeitsbereich)](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/I03_Scope.pdf)\n- [Folien: WPB I.04 PrimitiveDatentypen.pdf](https://csb.bio.uni-kl.de/teaching/WPB_Podcast/I04_Primitive_Datentypen.pdf)\n\n## Tasks\n\n"}]